
22_06_10_Userbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005880  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b3c  08005b3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b44  08005b44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000150  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d1a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfc  00000000  00000000  00032dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00035ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee0  00000000  00000000  00036ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027287  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149f4  00000000  00000000  0005ec47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee039  00000000  00000000  0007363b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161674  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a18  00000000  00000000  001616c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a18 	.word	0x08005a18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005a18 	.word	0x08005a18

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC1_Init+0x98>)
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC1_Init+0x98>)
 80005ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0x98>)
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_ADC1_Init+0xa0>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC1_Init+0x98>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0x98>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x98>)
 80005f6:	f000 fdbb 	bl	8001170 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 fa84 	bl	8000b0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000604:	2303      	movs	r3, #3
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x98>)
 8000616:	f000 fecf 	bl	80013b8 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 fa74 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000008c 	.word	0x2000008c
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_ADC_MspInit+0x7c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d127      	bne.n	80006aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000692:	2308      	movs	r3, #8
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0x84>)
 80006a6:	f001 fa59 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012000 	.word	0x40012000
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a26      	ldr	r2, [pc, #152]	; (8000794 <MX_GPIO_Init+0xd4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_GPIO_Init+0xd4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_GPIO_Init+0xd8>)
 800074e:	f001 fbc9 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000758:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_GPIO_Init+0xdc>)
 800076a:	f001 f9f7 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800076e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000788:	f001 f9e8 	bl	8001b5c <HAL_GPIO_Init>

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400
 800079c:	40020800 	.word	0x40020800

080007a0 <__io_putchar>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 100);
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <__io_putchar+0x20>)
 80007b0:	f003 f935 	bl	8003a1e <HAL_UART_Transmit>
	return ch;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000168 	.word	0x20000168

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fc60 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f816 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f7ff ff76 	bl	80006c0 <MX_GPIO_Init>
  MX_RTC_Init();
 80007d4:	f000 f9a0 	bl	8000b18 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80007d8:	f000 fbbc 	bl	8000f54 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80007dc:	f000 fb44 	bl	8000e68 <MX_TIM3_Init>
  MX_ADC1_Init();
 80007e0:	f7ff fed8 	bl	8000594 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007e4:	f000 f87c 	bl	80008e0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim3);
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <main+0x34>)
 80007ea:	f002 fc4a 	bl	8003082 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <main+0x34>)
 80007f0:	f002 fc96 	bl	8003120 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80007f4:	e7fe      	b.n	80007f4 <main+0x30>
 80007f6:	bf00      	nop
 80007f8:	20000120 	.word	0x20000120

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f8f8 	bl	8004a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <SystemClock_Config+0xdc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a2b      	ldr	r2, [pc, #172]	; (80008d8 <SystemClock_Config+0xdc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <SystemClock_Config+0xdc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <SystemClock_Config+0xe0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a25      	ldr	r2, [pc, #148]	; (80008dc <SystemClock_Config+0xe0>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <SystemClock_Config+0xe0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000858:	2306      	movs	r3, #6
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000874:	23b4      	movs	r3, #180	; 0xb4
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fbaf 	bl	8001fe8 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000890:	f000 f93c 	bl	8000b0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000894:	f001 fb58 	bl	8001f48 <HAL_PWREx_EnableOverDrive>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800089e:	f000 f935 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2105      	movs	r1, #5
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fe09 	bl	80024d8 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008cc:	f000 f91e 	bl	8000b0c <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	; 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2027      	movs	r0, #39	; 0x27
 80008ea:	f001 f86e 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008ee:	2027      	movs	r0, #39	; 0x27
 80008f0:	f001 f887 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2028      	movs	r0, #40	; 0x28
 80008fa:	f001 f866 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f001 f87f 	bl	8001a02 <HAL_NVIC_EnableIRQ>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pin;
	int i;

	if (GPIO_Pin == GPIO_PIN_13) {
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000918:	f040 808a 	bne.w	8000a30 <HAL_GPIO_EXTI_Callback+0x128>
		current_time = HAL_GetTick();
 800091c:	f000 fc1c 	bl	8001158 <HAL_GetTick>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x130>)
 8000926:	601a      	str	r2, [r3, #0]
		time_interval = current_time - last_time;
 8000928:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x130>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x134>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x138>)
 8000934:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8000936:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x130>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x134>)
 800093c:	6013      	str	r3, [r2, #0]

		pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4840      	ldr	r0, [pc, #256]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000944:	f001 fab6 	bl	8001eb4 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	72fb      	strb	r3, [r7, #11]

		if (time_interval <= 0.5){
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x138>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc07      	bgt.n	8000964 <HAL_GPIO_EXTI_Callback+0x5c>
			printf("Noise %d, %d\r\n", pin, time_interval);
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	4a3a      	ldr	r2, [pc, #232]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x138>)
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	483a      	ldr	r0, [pc, #232]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x140>)
 800095e:	f004 f857 	bl	8004a10 <iprintf>
 8000962:	e01e      	b.n	80009a2 <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else {
			click[2].time = click[1].time;
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	4a38      	ldr	r2, [pc, #224]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800096a:	6113      	str	r3, [r2, #16]
			click[2].level = click[1].level;
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800096e:	7b1a      	ldrb	r2, [r3, #12]
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000972:	751a      	strb	r2, [r3, #20]

			click[1].time = click[0].time;
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a34      	ldr	r2, [pc, #208]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800097a:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800097e:	791a      	ldrb	r2, [r3, #4]
 8000980:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000982:	731a      	strb	r2, [r3, #12]

			click[1].time = click[0].time;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800098a:	6093      	str	r3, [r2, #8]
			click[1].level = click[0].level;
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800098e:	791a      	ldrb	r2, [r3, #4]
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000992:	731a      	strb	r2, [r3, #12]

			click[0].time = time_interval;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x138>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2c      	ldr	r2, [pc, #176]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800099a:	6013      	str	r3, [r2, #0]
			click[0].level = pin;
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	7113      	strb	r3, [r2, #4]
		}
		if (click[2].level == GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009a4:	7d1b      	ldrb	r3, [r3, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d122      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0xe8>
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009ac:	7b1b      	ldrb	r3, [r3, #12]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d11e      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0xe8>
					&& click[0].level == GPIO_PIN_RESET) {
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009b4:	791b      	ldrb	r3, [r3, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d11a      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0xe8>
				for (i = 0; i < 3; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e00e      	b.n	80009de <HAL_GPIO_EXTI_Callback+0xd6>
					if (click[i].time >= DOUBLE_CLICK_MIN
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009c8:	2b27      	cmp	r3, #39	; 0x27
 80009ca:	dd0b      	ble.n	80009e4 <HAL_GPIO_EXTI_Callback+0xdc>
							&& click[i].time <= DOUBLE_CLICK_MAX) {
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009d4:	2b78      	cmp	r3, #120	; 0x78
 80009d6:	dc05      	bgt.n	80009e4 <HAL_GPIO_EXTI_Callback+0xdc>
				for (i = 0; i < 3; i++) {
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	dded      	ble.n	80009c0 <HAL_GPIO_EXTI_Callback+0xb8>
						continue;
					} else
						break;
				}
				if (i == 3) {
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d102      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0xe8>
					printf("Double Click\r\n");
 80009ea:	4819      	ldr	r0, [pc, #100]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x148>)
 80009ec:	f004 f896 	bl	8004b1c <puts>
				}
			}
			if (click[0].level == GPIO_PIN_RESET && click[0].time >= LONG_CLICK_MIN) // long click
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d108      	bne.n	8000a0a <HAL_GPIO_EXTI_Callback+0x102>
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a00:	db03      	blt.n	8000a0a <HAL_GPIO_EXTI_Callback+0x102>
			{
				printf("Long Key\r\n");
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a04:	f004 f88a 	bl	8004b1c <puts>
			} else if (click[0].level
					== GPIO_PIN_RESET&& click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX) {
				printf("Select Key, %ld\r\n", click[0].time);
			}
	}
}
 8000a08:	e012      	b.n	8000a30 <HAL_GPIO_EXTI_Callback+0x128>
			} else if (click[0].level
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10e      	bne.n	8000a30 <HAL_GPIO_EXTI_Callback+0x128>
					== GPIO_PIN_RESET&& click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX) {
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a1a:	da09      	bge.n	8000a30 <HAL_GPIO_EXTI_Callback+0x128>
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b78      	cmp	r3, #120	; 0x78
 8000a22:	dd05      	ble.n	8000a30 <HAL_GPIO_EXTI_Callback+0x128>
				printf("Select Key, %ld\r\n", click[0].time);
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x144>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a2c:	f003 fff0 	bl	8004a10 <iprintf>
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000ec 	.word	0x200000ec
 8000a3c:	200000f4 	.word	0x200000f4
 8000a40:	200000f0 	.word	0x200000f0
 8000a44:	40020800 	.word	0x40020800
 8000a48:	08005a30 	.word	0x08005a30
 8000a4c:	200000d4 	.word	0x200000d4
 8000a50:	08005a40 	.word	0x08005a40
 8000a54:	08005a50 	.word	0x08005a50
 8000a58:	08005a5c 	.word	0x08005a5c

08000a5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d13b      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x8a>
		HAL_ADC_Start(&hadc1);
 8000a6e:	4821      	ldr	r0, [pc, #132]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a70:	f000 fbc2 	bl	80011f8 <HAL_ADC_Start>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000a74:	481f      	ldr	r0, [pc, #124]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a76:	f000 fc91 	bl	800139c <HAL_ADC_GetValue>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a7e:	6013      	str	r3, [r2, #0]
		//printf("ADC_value = %lu\r\n", ADC_value);
		if (ADC_value <= UP_KEY_MAX) {
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d802      	bhi.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x32>
			printf("UP\r\n");
 8000a88:	481c      	ldr	r0, [pc, #112]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a8a:	f004 f847 	bl	8004b1c <puts>
		}
		if (ADC_value >= DOWN_KEY_MIN && ADC_value <= DOWN_KEY_MAX) {
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f240 323d 	movw	r2, #829	; 0x33d
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d908      	bls.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x50>
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f240 3266 	movw	r2, #870	; 0x366
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d802      	bhi.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x50>
			printf("DOWN\r\n");
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000aa8:	f004 f838 	bl	8004b1c <puts>
		}
		if (ADC_value >= LEFT_KEY_MIN && ADC_value <= LEFT_KEY_MAX) {
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f240 7275 	movw	r2, #1909	; 0x775
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d907      	bls.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 8000ac0:	d802      	bhi.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>
			printf("LEFT\r\n");
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ac4:	f004 f82a 	bl	8004b1c <puts>
		}
		if (ADC_value >= RIGHT_KEY_MIN && ADC_value <= RIGHT_KEY_MAX) {
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f640 3267 	movw	r2, #2919	; 0xb67
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d908      	bls.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d802      	bhi.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x8a>
			printf("RIGHT\r\n");
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ae2:	f004 f81b 	bl	8004b1c <puts>
		}
	}
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40000400 	.word	0x40000400
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	200000f8 	.word	0x200000f8
 8000afc:	08005a70 	.word	0x08005a70
 8000b00:	08005a74 	.word	0x08005a74
 8000b04:	08005a7c 	.word	0x08005a7c
 8000b08:	08005a84 	.word	0x08005a84

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <MX_RTC_Init+0xb0>)
 8000b34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b3e:	227f      	movs	r2, #127	; 0x7f
 8000b40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b5a:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b5c:	f002 f85c 	bl	8002c18 <HAL_RTC_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b66:	f7ff ffd1 	bl	8000b0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000b86:	f002 f8bd 	bl	8002d04 <HAL_RTC_SetTime>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f7ff ffbc 	bl	8000b0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b94:	2301      	movs	r3, #1
 8000b96:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_RTC_Init+0xac>)
 8000bac:	f002 f944 	bl	8002e38 <HAL_RTC_SetDate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000bb6:	f7ff ffa9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000fc 	.word	0x200000fc
 8000bc8:	40002800 	.word	0x40002800

08000bcc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	2230      	movs	r2, #48	; 0x30
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 ff0f 	bl	8004a00 <memset>
  if(rtcHandle->Instance==RTC)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_RTC_MspInit+0x4c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d111      	bne.n	8000c10 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bec:	2320      	movs	r3, #32
 8000bee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fe4c 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c06:	f7ff ff81 	bl	8000b0c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <HAL_RTC_MspInit+0x50>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	3738      	adds	r7, #56	; 0x38
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40002800 	.word	0x40002800
 8000c1c:	42470e3c 	.word	0x42470e3c

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 fa38 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM3_IRQHandler+0x10>)
 8000cca:	f002 fa99 	bl	8003200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000120 	.word	0x20000120

08000cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART3_IRQHandler+0x10>)
 8000cde:	f002 ff31 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000168 	.word	0x20000168

08000cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf4:	f001 f910 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e00a      	b.n	8000d24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d0e:	f3af 8000 	nop.w
 8000d12:	4601      	mov	r1, r0
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	b2ca      	uxtb	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf0      	blt.n	8000d0e <_read+0x12>
	}

return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e009      	b.n	8000d5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fd25 	bl	80007a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf1      	blt.n	8000d48 <_write+0x12>
	}
	return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_close>:

int _close(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	605a      	str	r2, [r3, #4]
	return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_isatty>:

int _isatty(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	return 1;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f003 fdd0 	bl	80049ac <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20030000 	.word	0x20030000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	2000011c 	.word	0x2000011c
 8000e40:	200001c0 	.word	0x200001c0

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM3_Init+0x94>)
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <MX_TIM3_Init+0x98>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM3_Init+0x94>)
 8000e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM3_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_TIM3_Init+0x94>)
 8000e9a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_TIM3_Init+0x94>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM3_Init+0x94>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_TIM3_Init+0x94>)
 8000eae:	f002 f8e8 	bl	8003082 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000eb8:	f7ff fe28 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM3_Init+0x94>)
 8000eca:	f002 faa1 	bl	8003410 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ed4:	f7ff fe1a 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM3_Init+0x94>)
 8000ee6:	f002 fcbd 	bl	8003864 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ef0:	f7ff fe0c 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000120 	.word	0x20000120
 8000f00:	40000400 	.word	0x40000400

08000f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d115      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_TIM_Base_MspInit+0x4c>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_Base_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201d      	movs	r0, #29
 8000f38:	f000 fd47 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f3c:	201d      	movs	r0, #29
 8000f3e:	f000 fd60 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART3_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f8c:	f002 fcfa 	bl	8003984 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f7ff fdb9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000168 	.word	0x20000168
 8000fa4:	40004800 	.word	0x40004800

08000fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_UART_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12c      	bne.n	8001024 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_UART_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001014:	2307      	movs	r3, #7
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_UART_MspInit+0x8c>)
 8001020:	f000 fd9c 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40004800 	.word	0x40004800
 8001030:	40023800 	.word	0x40023800
 8001034:	40020c00 	.word	0x40020c00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001054:	4c0b      	ldr	r4, [pc, #44]	; (8001084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001062:	f7ff feef 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f003 fca7 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fbab 	bl	80007c4 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001070:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800107c:	08005b4c 	.word	0x08005b4c
  ldr r2, =_sbss
 8001080:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001084:	200001c0 	.word	0x200001c0

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_Init+0x40>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_Init+0x40>)
 80010a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x40>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 fc7d 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	200f      	movs	r0, #15
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff fdae 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fc95 	bl	8001a1e <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 fc5d 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000008 	.word	0x20000008
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	200001ac 	.word	0x200001ac

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200001ac 	.word	0x200001ac

08001170 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e033      	b.n	80011ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fa52 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011b6:	f023 0302 	bic.w	r3, r3, #2
 80011ba:	f043 0202 	orr.w	r2, r3, #2
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fa2a 	bl	800161c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f023 0303 	bic.w	r3, r3, #3
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
 80011de:	e001      	b.n	80011e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Start+0x1a>
 800120e:	2302      	movs	r3, #2
 8001210:	e0b2      	b.n	8001378 <HAL_ADC_Start+0x180>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d018      	beq.n	800125a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <HAL_ADC_Start+0x18c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_ADC_Start+0x190>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	0c9a      	lsrs	r2, r3, #18
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800124c:	e002      	b.n	8001254 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3b01      	subs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f9      	bne.n	800124e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d17a      	bne.n	800135e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001292:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a6:	d106      	bne.n	80012b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f023 0206 	bic.w	r2, r3, #6
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
 80012b4:	e002      	b.n	80012bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <HAL_ADC_Start+0x194>)
 80012c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d12a      	bne.n	8001334 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <HAL_ADC_Start+0x198>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d015      	beq.n	8001314 <HAL_ADC_Start+0x11c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <HAL_ADC_Start+0x19c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d105      	bne.n	80012fe <HAL_ADC_Start+0x106>
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_ADC_Start+0x194>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_ADC_Start+0x1a0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d136      	bne.n	8001376 <HAL_ADC_Start+0x17e>
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_ADC_Start+0x194>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	d130      	bne.n	8001376 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d129      	bne.n	8001376 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	e020      	b.n	8001376 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_ADC_Start+0x198>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d11b      	bne.n	8001376 <HAL_ADC_Start+0x17e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d114      	bne.n	8001376 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e00b      	b.n	8001376 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000000 	.word	0x20000000
 8001388:	431bde83 	.word	0x431bde83
 800138c:	40012300 	.word	0x40012300
 8001390:	40012000 	.word	0x40012000
 8001394:	40012100 	.word	0x40012100
 8001398:	40012200 	.word	0x40012200

0800139c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1c>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e113      	b.n	80015fc <HAL_ADC_ConfigChannel+0x244>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d925      	bls.n	8001430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1e      	subs	r3, #30
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43da      	mvns	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	400a      	ands	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68d9      	ldr	r1, [r3, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	4603      	mov	r3, r0
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4403      	add	r3, r0
 8001422:	3b1e      	subs	r3, #30
 8001424:	409a      	lsls	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	e022      	b.n	8001476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6919      	ldr	r1, [r3, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	2207      	movs	r2, #7
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	400a      	ands	r2, r1
 8001452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6919      	ldr	r1, [r3, #16]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4403      	add	r3, r0
 800146c:	409a      	lsls	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b06      	cmp	r3, #6
 800147c:	d824      	bhi.n	80014c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b05      	subs	r3, #5
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b05      	subs	r3, #5
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
 80014c6:	e04c      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d824      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	; 0x23
 80014e2:	221f      	movs	r2, #31
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b23      	subs	r3, #35	; 0x23
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
 8001518:	e023      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	; 0x41
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b41      	subs	r3, #65	; 0x41
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_ADC_ConfigChannel+0x250>)
 8001564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a28      	ldr	r2, [pc, #160]	; (800160c <HAL_ADC_ConfigChannel+0x254>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d10f      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b12      	cmp	r3, #18
 8001576:	d10b      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_ADC_ConfigChannel+0x254>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_ADC_ConfigChannel+0x258>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_ADC_ConfigChannel+0x1f4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d122      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_ADC_ConfigChannel+0x258>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d111      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_ADC_ConfigChannel+0x25c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_ADC_ConfigChannel+0x260>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9a      	lsrs	r2, r3, #18
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40012300 	.word	0x40012300
 800160c:	40012000 	.word	0x40012000
 8001610:	10000012 	.word	0x10000012
 8001614:	20000000 	.word	0x20000000
 8001618:	431bde83 	.word	0x431bde83

0800161c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <ADC_Init+0x1f0>)
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021a      	lsls	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	4a58      	ldr	r2, [pc, #352]	; (8001810 <ADC_Init+0x1f4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e00f      	b.n	800171a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0202 	bic.w	r2, r2, #2
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	005a      	lsls	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01b      	beq.n	8001780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6859      	ldr	r1, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	035a      	lsls	r2, r3, #13
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e007      	b.n	8001790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	051a      	lsls	r2, r3, #20
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017d2:	025a      	lsls	r2, r3, #9
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	029a      	lsls	r2, r3, #10
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012300 	.word	0x40012300
 8001810:	0f000001 	.word	0x0f000001

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff fb88 	bl	8001158 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d008      	beq.n	8001a68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e052      	b.n	8001b0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0216 	bic.w	r2, r2, #22
 8001a76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <HAL_DMA_Abort+0x62>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0208 	bic.w	r2, r2, #8
 8001aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	e013      	b.n	8001ae2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff fb4d 	bl	8001158 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d90c      	bls.n	8001ae2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e015      	b.n	8001b0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e4      	bne.n	8001aba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	223f      	movs	r2, #63	; 0x3f
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d004      	beq.n	8001b34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e00c      	b.n	8001b4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2205      	movs	r2, #5
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e177      	b.n	8001e68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8166 	bne.w	8001e62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80c0 	beq.w	8001e62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_GPIO_Init+0x324>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a61      	ldr	r2, [pc, #388]	; (8001e84 <HAL_GPIO_Init+0x328>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_GPIO_Init+0x32c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d037      	beq.n	8001d9a <HAL_GPIO_Init+0x23e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_GPIO_Init+0x330>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d031      	beq.n	8001d96 <HAL_GPIO_Init+0x23a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a56      	ldr	r2, [pc, #344]	; (8001e90 <HAL_GPIO_Init+0x334>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02b      	beq.n	8001d92 <HAL_GPIO_Init+0x236>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a55      	ldr	r2, [pc, #340]	; (8001e94 <HAL_GPIO_Init+0x338>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d025      	beq.n	8001d8e <HAL_GPIO_Init+0x232>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a54      	ldr	r2, [pc, #336]	; (8001e98 <HAL_GPIO_Init+0x33c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01f      	beq.n	8001d8a <HAL_GPIO_Init+0x22e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a53      	ldr	r2, [pc, #332]	; (8001e9c <HAL_GPIO_Init+0x340>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d019      	beq.n	8001d86 <HAL_GPIO_Init+0x22a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_GPIO_Init+0x344>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0x226>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a51      	ldr	r2, [pc, #324]	; (8001ea4 <HAL_GPIO_Init+0x348>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00d      	beq.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a50      	ldr	r2, [pc, #320]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <HAL_GPIO_Init+0x21e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4f      	ldr	r2, [pc, #316]	; (8001eac <HAL_GPIO_Init+0x350>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_GPIO_Init+0x21a>
 8001d72:	2309      	movs	r3, #9
 8001d74:	e012      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d76:	230a      	movs	r3, #10
 8001d78:	e010      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	e00e      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x240>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	; (8001e84 <HAL_GPIO_Init+0x328>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a34      	ldr	r2, [pc, #208]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <HAL_GPIO_Init+0x354>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f ae84 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40021400 	.word	0x40021400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40022400 	.word	0x40022400
 8001eb0:	40013c00 	.word	0x40013c00

08001eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fce6 	bl	8000908 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_PWREx_EnableOverDrive+0x94>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f74:	f7ff f8f0 	bl	8001158 <HAL_GetTick>
 8001f78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f7a:	e009      	b.n	8001f90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f7c:	f7ff f8ec 	bl	8001158 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f8a:	d901      	bls.n	8001f90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e01f      	b.n	8001fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d1ee      	bne.n	8001f7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa4:	f7ff f8d8 	bl	8001158 <HAL_GetTick>
 8001fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001faa:	e009      	b.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fac:	f7ff f8d4 	bl	8001158 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fba:	d901      	bls.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e007      	b.n	8001fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fcc:	d1ee      	bne.n	8001fac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	420e0040 	.word	0x420e0040
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	420e0044 	.word	0x420e0044

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e267      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d075      	beq.n	80020f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b85      	ldr	r3, [pc, #532]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201a:	2b08      	cmp	r3, #8
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b82      	ldr	r3, [pc, #520]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x108>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d157      	bne.n	80020f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e242      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x74>
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b70      	ldr	r3, [pc, #448]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6f      	ldr	r2, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 8002080:	4b69      	ldr	r3, [pc, #420]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a68      	ldr	r2, [pc, #416]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b66      	ldr	r3, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff f85a 	bl	8001158 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff f856 	bl	8001158 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e207      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xc0>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f846 	bl	8001158 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f842 	bl	8001158 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1f3      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0xe8>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b44      	ldr	r3, [pc, #272]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1c7      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4937      	ldr	r1, [pc, #220]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b34      	ldr	r3, [pc, #208]	; (800222c <HAL_RCC_OscConfig+0x244>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fffb 	bl	8001158 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fff7 	bl	8001158 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1a8      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4925      	ldr	r1, [pc, #148]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_OscConfig+0x244>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe ffda 	bl	8001158 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe ffd6 	bl	8001158 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e187      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d036      	beq.n	8002240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_RCC_OscConfig+0x248>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7fe ffba 	bl	8001158 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe ffb6 	bl	8001158 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e167      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_OscConfig+0x240>)
 80021fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x200>
 8002206:	e01b      	b.n	8002240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_OscConfig+0x248>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe ffa3 	bl	8001158 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e00e      	b.n	8002234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe ff9f 	bl	8001158 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d907      	bls.n	8002234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e150      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
 8002228:	40023800 	.word	0x40023800
 800222c:	42470000 	.word	0x42470000
 8002230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ea      	bne.n	8002216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8097 	beq.w	800237c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002252:	4b81      	ldr	r3, [pc, #516]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10f      	bne.n	800227e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b7d      	ldr	r3, [pc, #500]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a7c      	ldr	r2, [pc, #496]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b77      	ldr	r3, [pc, #476]	; (800245c <HAL_RCC_OscConfig+0x474>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b74      	ldr	r3, [pc, #464]	; (800245c <HAL_RCC_OscConfig+0x474>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a73      	ldr	r2, [pc, #460]	; (800245c <HAL_RCC_OscConfig+0x474>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7fe ff5f 	bl	8001158 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7fe ff5b 	bl	8001158 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e10c      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x474>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2ea>
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a63      	ldr	r2, [pc, #396]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	e01c      	b.n	800230c <HAL_RCC_OscConfig+0x324>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x30c>
 80022da:	4b5f      	ldr	r3, [pc, #380]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a5e      	ldr	r2, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
 80022e6:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a5b      	ldr	r2, [pc, #364]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0x324>
 80022f4:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	4a54      	ldr	r2, [pc, #336]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe ff20 	bl	8001158 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7fe ff1c 	bl	8001158 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0cb      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ee      	beq.n	800231c <HAL_RCC_OscConfig+0x334>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7fe ff0a 	bl	8001158 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe ff06 	bl	8001158 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0b5      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1ee      	bne.n	8002348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a38      	ldr	r2, [pc, #224]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a1 	beq.w	80024c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d05c      	beq.n	800244c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d141      	bne.n	800241e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCC_OscConfig+0x478>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe feda 	bl	8001158 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fed6 	bl	8001158 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e087      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	491b      	ldr	r1, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x478>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe feaf 	bl	8001158 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe feab 	bl	8001158 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e05c      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x416>
 800241c:	e054      	b.n	80024c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_OscConfig+0x478>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fe98 	bl	8001158 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fe94 	bl	8001158 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e045      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_OscConfig+0x470>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x444>
 800244a:	e03d      	b.n	80024c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e038      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000
 8002460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x4ec>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d028      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d121      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d11a      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800249a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249c:	4293      	cmp	r3, r2
 800249e:	d111      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	3b01      	subs	r3, #1
 80024ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0cc      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d90c      	bls.n	8002514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b65      	ldr	r3, [pc, #404]	; (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b63      	ldr	r3, [pc, #396]	; (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0b8      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800254e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	494d      	ldr	r1, [pc, #308]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d044      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d119      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e07f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d003      	beq.n	8002596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	2b03      	cmp	r3, #3
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e067      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4934      	ldr	r1, [pc, #208]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fdc6 	bl	8001158 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7fe fdc2 	bl	8001158 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e04f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d20c      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e032      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	490e      	ldr	r1, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265e:	f000 f821 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002662:	4602      	mov	r2, r0
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	490a      	ldr	r1, [pc, #40]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	5ccb      	ldrb	r3, [r1, r3]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fd26 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00
 8002694:	40023800 	.word	0x40023800
 8002698:	08005a8c 	.word	0x08005a8c
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b090      	sub	sp, #64	; 0x40
 80026aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
 80026b0:	2300      	movs	r3, #0
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b4:	2300      	movs	r3, #0
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d00d      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x40>
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	f200 80a1 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x16c>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x34>
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x3a>
 80026d6:	e09b      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_GetSysClockFreq+0x184>)
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026dc:	e09b      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_GetSysClockFreq+0x188>)
 80026e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026e2:	e098      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e4:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d028      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	2200      	movs	r2, #0
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	627a      	str	r2, [r7, #36]	; 0x24
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800270c:	2100      	movs	r1, #0
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_GetSysClockFreq+0x188>)
 8002710:	fb03 f201 	mul.w	r2, r3, r1
 8002714:	2300      	movs	r3, #0
 8002716:	fb00 f303 	mul.w	r3, r0, r3
 800271a:	4413      	add	r3, r2
 800271c:	4a43      	ldr	r2, [pc, #268]	; (800282c <HAL_RCC_GetSysClockFreq+0x188>)
 800271e:	fba0 1202 	umull	r1, r2, r0, r2
 8002722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002724:	460a      	mov	r2, r1
 8002726:	62ba      	str	r2, [r7, #40]	; 0x28
 8002728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272a:	4413      	add	r3, r2
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	2200      	movs	r2, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	61fa      	str	r2, [r7, #28]
 8002736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800273e:	f7fd fda7 	bl	8000290 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4613      	mov	r3, r2
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274a:	e053      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	2200      	movs	r2, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	617a      	str	r2, [r7, #20]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800275e:	f04f 0b00 	mov.w	fp, #0
 8002762:	4652      	mov	r2, sl
 8002764:	465b      	mov	r3, fp
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ebb2 080a 	subs.w	r8, r2, sl
 800277e:	eb63 090b 	sbc.w	r9, r3, fp
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800278e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002792:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002796:	ebb2 0408 	subs.w	r4, r2, r8
 800279a:	eb63 0509 	sbc.w	r5, r3, r9
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	00eb      	lsls	r3, r5, #3
 80027a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ac:	00e2      	lsls	r2, r4, #3
 80027ae:	4614      	mov	r4, r2
 80027b0:	461d      	mov	r5, r3
 80027b2:	eb14 030a 	adds.w	r3, r4, sl
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	eb45 030b 	adc.w	r3, r5, fp
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	2200      	movs	r2, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	60fa      	str	r2, [r7, #12]
 80027e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e8:	f7fd fd52 	bl	8000290 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetSysClockFreq+0x184>)
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002818:	4618      	mov	r0, r3
 800281a:	3740      	adds	r7, #64	; 0x40
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	017d7840 	.word	0x017d7840

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCC_GetHCLKFreq+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff0 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0a9b      	lsrs	r3, r3, #10
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	08005a9c 	.word	0x08005a9c

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffdc 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0b5b      	lsrs	r3, r3, #13
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08005a9c 	.word	0x08005a9c

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d075      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028cc:	4b91      	ldr	r3, [pc, #580]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028d2:	f7fe fc41 	bl	8001158 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028da:	f7fe fc3d 	bl	8001158 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e189      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028ec:	4b8a      	ldr	r3, [pc, #552]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	019a      	lsls	r2, r3, #6
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	071b      	lsls	r3, r3, #28
 8002910:	4981      	ldr	r1, [pc, #516]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01f      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002924:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292a:	0f1b      	lsrs	r3, r3, #28
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	019a      	lsls	r2, r3, #6
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	071b      	lsls	r3, r3, #28
 8002944:	4974      	ldr	r1, [pc, #464]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800294c:	4b72      	ldr	r3, [pc, #456]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002952:	f023 021f 	bic.w	r2, r3, #31
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	3b01      	subs	r3, #1
 800295c:	496e      	ldr	r1, [pc, #440]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00d      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	019a      	lsls	r2, r3, #6
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	071b      	lsls	r3, r3, #28
 8002984:	4964      	ldr	r1, [pc, #400]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800298c:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7fe fbe1 	bl	8001158 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800299a:	f7fe fbdd 	bl	8001158 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e129      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ac:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d079      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029d6:	f7fe fbbf 	bl	8001158 <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80029de:	f7fe fbbb 	bl	8001158 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e107      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fc:	d0ef      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d020      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a0a:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	0f1b      	lsrs	r3, r3, #28
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	019a      	lsls	r2, r3, #6
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	431a      	orrs	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	493b      	ldr	r1, [pc, #236]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01e      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	0e1b      	lsrs	r3, r3, #24
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	019a      	lsls	r2, r3, #6
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	071b      	lsls	r3, r3, #28
 8002a78:	4927      	ldr	r1, [pc, #156]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	4922      	ldr	r1, [pc, #136]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fb5c 	bl	8001158 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002aa4:	f7fe fb58 	bl	8001158 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0a4      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808b 	beq.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002afa:	f7fe fb2d 	bl	8001158 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b00:	e010      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fb29 	bl	8001158 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d909      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e075      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002b14:	42470068 	.word	0x42470068
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470070 	.word	0x42470070
 8002b20:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0e8      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02f      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe faef 	bl	8001158 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe faeb 	bl	8001158 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e035      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bac:	d10d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	4912      	ldr	r1, [pc, #72]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	490a      	ldr	r1, [pc, #40]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	42470e40 	.word	0x42470e40
 8002c14:	424711e0 	.word	0x424711e0

08002c18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e066      	b.n	8002cfc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7f5b      	ldrb	r3, [r3, #29]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd ffc4 	bl	8000bcc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	22ca      	movs	r2, #202	; 0xca
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2253      	movs	r2, #83	; 0x53
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f998 	bl	8002f90 <RTC_EnterInitMode>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12c      	bne.n	8002cc4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68d2      	ldr	r2, [r2, #12]
 8002ca4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6919      	ldr	r1, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	041a      	lsls	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f99f 	bl	8002ffe <RTC_ExitInitMode>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d113      	bne.n	8002cf2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	22ff      	movs	r2, #255	; 0xff
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	7f1b      	ldrb	r3, [r3, #28]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_RTC_SetTime+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e087      	b.n	8002e30 <HAL_RTC_SetTime+0x12c>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d126      	bne.n	8002d80 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2200      	movs	r2, #0
 8002d44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f97c 	bl	8003048 <RTC_ByteToBcd2>
 8002d50:	4603      	mov	r3, r0
 8002d52:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f975 	bl	8003048 <RTC_ByteToBcd2>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d62:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f96d 	bl	8003048 <RTC_ByteToBcd2>
 8002d6e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d70:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	78db      	ldrb	r3, [r3, #3]
 8002d78:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e018      	b.n	8002db2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002da0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002da6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	78db      	ldrb	r3, [r3, #3]
 8002dac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	22ca      	movs	r2, #202	; 0xca
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2253      	movs	r2, #83	; 0x53
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f8e4 	bl	8002f90 <RTC_EnterInitMode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d120      	bne.n	8002e14 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ddc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002de0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8f7 	bl	8002ffe <RTC_ExitInitMode>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	771a      	strb	r2, [r3, #28]

  return status;
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd90      	pop	{r4, r7, pc}

08002e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	7f1b      	ldrb	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_RTC_SetDate+0x1c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e071      	b.n	8002f38 <HAL_RTC_SetDate+0x100>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_RTC_SetDate+0x4c>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	f023 0310 	bic.w	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	330a      	adds	r3, #10
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	78db      	ldrb	r3, [r3, #3]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f8da 	bl	8003048 <RTC_ByteToBcd2>
 8002e94:	4603      	mov	r3, r0
 8002e96:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f8d3 	bl	8003048 <RTC_ByteToBcd2>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ea6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	789b      	ldrb	r3, [r3, #2]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f8cb 	bl	8003048 <RTC_ByteToBcd2>
 8002eb2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002eb4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e00e      	b.n	8002ee2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	78db      	ldrb	r3, [r3, #3]
 8002ec8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ed0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ed6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	22ca      	movs	r2, #202	; 0xca
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2253      	movs	r2, #83	; 0x53
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f84c 	bl	8002f90 <RTC_EnterInitMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f10:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f873 	bl	8002ffe <RTC_ExitInitMode>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	22ff      	movs	r2, #255	; 0xff
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	771a      	strb	r2, [r3, #28]

  return status;
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5c:	f7fe f8fc 	bl	8001158 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f62:	e009      	b.n	8002f78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f64:	f7fe f8f8 	bl	8001158 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f72:	d901      	bls.n	8002f78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e007      	b.n	8002f88 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0ee      	beq.n	8002f64 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d122      	bne.n	8002ff4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe f8cb 	bl	8001158 <HAL_GetTick>
 8002fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fc4:	e00c      	b.n	8002fe0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fc6:	f7fe f8c7 	bl	8001158 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd4:	d904      	bls.n	8002fe0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2204      	movs	r2, #4
 8002fda:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <RTC_EnterInitMode+0x64>
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d1e8      	bne.n	8002fc6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff89 	bl	8002f40 <HAL_RTC_WaitForSynchro>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003056:	e005      	b.n	8003064 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	3301      	adds	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	3b0a      	subs	r3, #10
 8003062:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b09      	cmp	r3, #9
 8003068:	d8f6      	bhi.n	8003058 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	b2da      	uxtb	r2, r3
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	4313      	orrs	r3, r2
 8003074:	b2db      	uxtb	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e041      	b.n	8003118 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd ff2b 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f000 fa95 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d001      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e04e      	b.n	80031d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d01d      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x80>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_TIM_Base_Start_IT+0xdc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d010      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	e007      	b.n	80031d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00
 80031f4:	40010400 	.word	0x40010400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40001800 	.word	0x40001800

08003200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0202 	mvn.w	r2, #2
 800322c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9b5 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f9a7 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f9b8 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0204 	mvn.w	r2, #4
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f98b 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f97d 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f98e 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0208 	mvn.w	r2, #8
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2204      	movs	r2, #4
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f961 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f953 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f964 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b10      	cmp	r3, #16
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2208      	movs	r2, #8
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f937 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f929 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f93a 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0201 	mvn.w	r2, #1
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fb6c 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fae0 	bl	8003970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8ff 	bl	80035da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0220 	mvn.w	r2, #32
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 faaa 	bl	800395c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e0b4      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x186>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d03e      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	f200 8087 	bhi.w	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	f000 8086 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x172>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d87f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d01a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d87b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d050      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x11a>
 8003488:	2b60      	cmp	r3, #96	; 0x60
 800348a:	d877      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d03c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xfa>
 8003490:	2b50      	cmp	r3, #80	; 0x50
 8003492:	d873      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d058      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x13a>
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d86f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d064      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d86b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d060      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d867      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d05a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b4:	e062      	b.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f000 f9ad 	bl	8003824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04f      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f000 f996 	bl	8003824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e03c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 f90a 	bl	8003730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	; 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f963 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 8003528:	e02c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f929 	bl	800378e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	; 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f953 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 8003548:	e01c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f8ea 	bl	8003730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f943 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 8003568:	e00c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 f93a 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 800357a:	e003      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e000      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a40      	ldr	r2, [pc, #256]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d00f      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00b      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3b      	ldr	r2, [pc, #236]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d108      	bne.n	8003642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d027      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d023      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a29      	ldr	r2, [pc, #164]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d017      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <TIM_Base_SetConfig+0x128>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a27      	ldr	r2, [pc, #156]	; (800371c <TIM_Base_SetConfig+0x12c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <TIM_Base_SetConfig+0x130>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <TIM_Base_SetConfig+0x134>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <TIM_Base_SetConfig+0x138>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <TIM_Base_SetConfig+0x13c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <TIM_Base_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <TIM_Base_SetConfig+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	40001800 	.word	0x40001800
 8003728:	40001c00 	.word	0x40001c00
 800372c:	40002000 	.word	0x40002000

08003730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f023 030a 	bic.w	r3, r3, #10
 800376c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0210 	bic.w	r2, r3, #16
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	031b      	lsls	r3, r3, #12
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	f043 0307 	orr.w	r3, r3, #7
 8003810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	021a      	lsls	r2, r3, #8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	431a      	orrs	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e05a      	b.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d01d      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10c      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4313      	orrs	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40010400 	.word	0x40010400
 8003954:	40014000 	.word	0x40014000
 8003958:	40001800 	.word	0x40001800

0800395c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e03f      	b.n	8003a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fafc 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fd7b 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	; 0x28
 8003a22:	af02      	add	r7, sp, #8
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d17c      	bne.n	8003b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_Transmit+0x2c>
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e075      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_UART_Transmit+0x3e>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e06e      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fd fb71 	bl	8001158 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x82>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ab0:	e02a      	b.n	8003b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 faf9 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e036      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e007      	b.n	8003afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1cf      	bne.n	8003ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fac9 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e006      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0ba      	sub	sp, #232	; 0xe8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0x66>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fbd3 	bl	800434e <UART_Receive_IT>
      return;
 8003ba8:	e256      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80de 	beq.w	8003d70 <HAL_UART_IRQHandler+0x22c>
 8003bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80d1 	beq.w	8003d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xae>
 8003bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_UART_IRQHandler+0xd2>
 8003bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_UART_IRQHandler+0xf6>
 8003c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_UART_IRQHandler+0x126>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0208 	orr.w	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 81ed 	beq.w	800404e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_UART_IRQHandler+0x14e>
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fb5e 	bl	800434e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_UART_IRQHandler+0x17a>
 8003cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04f      	beq.n	8003d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa66 	bl	8004190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d141      	bne.n	8003d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d9      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	4a7d      	ldr	r2, [pc, #500]	; (8003f20 <HAL_UART_IRQHandler+0x3dc>)
 8003d2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd feef 	bl	8001b16 <HAL_DMA_Abort_IT>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e00e      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f99a 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00a      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f996 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e006      	b.n	8003d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f992 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d6a:	e170      	b.n	800404e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	bf00      	nop
    return;
 8003d6e:	e16e      	b.n	800404e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 814a 	bne.w	800400e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8143 	beq.w	800400e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 813c 	beq.w	800400e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	f040 80b4 	bne.w	8003f24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8140 	beq.w	8004052 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	f080 8139 	bcs.w	8004052 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003de6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	f000 8088 	beq.w	8003f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1d9      	bne.n	8003df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e1      	bne.n	8003e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e3      	bne.n	8003e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e3      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fd98 	bl	8001a36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8c0 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f1c:	e099      	b.n	8004052 <HAL_UART_IRQHandler+0x50e>
 8003f1e:	bf00      	nop
 8003f20:	08004257 	.word	0x08004257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 808b 	beq.w	8004056 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8086 	beq.w	8004056 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e3      	bne.n	8003f4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3314      	adds	r3, #20
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	623b      	str	r3, [r7, #32]
   return(result);
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e3      	bne.n	8003f82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fec:	61fa      	str	r2, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e3      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f848 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800400c:	e023      	b.n	8004056 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_UART_IRQHandler+0x4ea>
 800401a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f929 	bl	800427e <UART_Transmit_IT>
    return;
 800402c:	e014      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <HAL_UART_IRQHandler+0x514>
 800403a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f969 	bl	800431e <UART_EndTransmit_IT>
    return;
 800404c:	e004      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
    return;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
      return;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_UART_IRQHandler+0x514>
      return;
 8004056:	bf00      	nop
  }
}
 8004058:	37e8      	adds	r7, #232	; 0xe8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop

08004060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b090      	sub	sp, #64	; 0x40
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	e050      	b.n	8004168 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d04c      	beq.n	8004168 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040d4:	f7fd f840 	bl	8001158 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d241      	bcs.n	8004168 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004104:	637a      	str	r2, [r7, #52]	; 0x34
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800410a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	613b      	str	r3, [r7, #16]
   return(result);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004138:	623a      	str	r2, [r7, #32]
 800413a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	69f9      	ldr	r1, [r7, #28]
 800413e:	6a3a      	ldr	r2, [r7, #32]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	61bb      	str	r3, [r7, #24]
   return(result);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e00f      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	429a      	cmp	r2, r3
 8004184:	d09f      	beq.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3740      	adds	r7, #64	; 0x40
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b095      	sub	sp, #84	; 0x54
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041b8:	643a      	str	r2, [r7, #64]	; 0x40
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	61fb      	str	r3, [r7, #28]
   return(result);
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	d119      	bne.n	800423c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	60bb      	str	r3, [r7, #8]
   return(result);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004228:	61ba      	str	r2, [r7, #24]
 800422a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
}
 800424a:	bf00      	nop
 800424c:	3754      	adds	r7, #84	; 0x54
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff ff09 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d13e      	bne.n	8004310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d114      	bne.n	80042c6 <UART_Transmit_IT+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d110      	bne.n	80042c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	621a      	str	r2, [r3, #32]
 80042c4:	e008      	b.n	80042d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6211      	str	r1, [r2, #32]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe8e 	bl	8004060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b08c      	sub	sp, #48	; 0x30
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b22      	cmp	r3, #34	; 0x22
 8004360:	f040 80ab 	bne.w	80044ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d117      	bne.n	800439e <UART_Receive_IT+0x50>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438c:	b29a      	uxth	r2, r3
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
 800439c:	e026      	b.n	80043ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d007      	beq.n	80043c2 <UART_Receive_IT+0x74>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <UART_Receive_IT+0x82>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e008      	b.n	80043e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4619      	mov	r1, r3
 80043fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d15a      	bne.n	80044b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0220 	bic.w	r2, r2, #32
 800440e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800441e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	2b01      	cmp	r3, #1
 800443e:	d135      	bne.n	80044ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	613b      	str	r3, [r7, #16]
   return(result);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	623a      	str	r2, [r7, #32]
 8004468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	61bb      	str	r3, [r7, #24]
   return(result);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fdf9 	bl	800409c <HAL_UARTEx_RxEventCallback>
 80044aa:	e002      	b.n	80044b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fde1 	bl	8004074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e002      	b.n	80044bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b0c0      	sub	sp, #256	; 0x100
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	ea40 0301 	orr.w	r3, r0, r1
 80044ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800451c:	f021 010c 	bic.w	r1, r1, #12
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	ea40 0301 	orr.w	r3, r0, r1
 800454a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8f      	ldr	r3, [pc, #572]	; (8004790 <UART_SetConfig+0x2cc>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0xa0>
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8d      	ldr	r3, [pc, #564]	; (8004794 <UART_SetConfig+0x2d0>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d104      	bne.n	800456e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe f984 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8004568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800456c:	e003      	b.n	8004576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7fe f96b 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8004572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004580:	f040 810c 	bne.w	800479c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	1891      	adds	r1, r2, r2
 800459c:	65b9      	str	r1, [r7, #88]	; 0x58
 800459e:	415b      	adcs	r3, r3
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a6:	4621      	mov	r1, r4
 80045a8:	eb12 0801 	adds.w	r8, r2, r1
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb43 0901 	adc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045f2:	460b      	mov	r3, r1
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
 80045f8:	4613      	mov	r3, r2
 80045fa:	eb42 0303 	adc.w	r3, r2, r3
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004608:	f7fb fe42 	bl	8000290 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	64b9      	str	r1, [r7, #72]	; 0x48
 8004634:	415b      	adcs	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800463c:	4641      	mov	r1, r8
 800463e:	eb12 0a01 	adds.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0b01 	adc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	4692      	mov	sl, r2
 800465e:	469b      	mov	fp, r3
 8004660:	4643      	mov	r3, r8
 8004662:	eb1a 0303 	adds.w	r3, sl, r3
 8004666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466a:	464b      	mov	r3, r9
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800469a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800469e:	f7fb fdf7 	bl	8000290 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2301 	umull	r2, r3, r3, r1
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <UART_SetConfig+0x2d4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6339      	str	r1, [r7, #48]	; 0x30
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800473c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800475a:	f7fb fd99 	bl	8000290 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x2d4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x2d4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800478c:	e105      	b.n	800499a <UART_SetConfig+0x4d6>
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	4641      	mov	r1, r8
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0501 	adc.w	r5, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e4:	464b      	mov	r3, r9
 80047e6:	eb45 0303 	adc.w	r3, r5, r3
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480a:	4629      	mov	r1, r5
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4621      	mov	r1, r4
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800481c:	f7fb fd38 	bl	8000290 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800483c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	67bb      	str	r3, [r7, #120]	; 0x78
 800489a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ba:	f7fb fce9 	bl	8000290 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	; 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e2:	441c      	add	r4, r3
 80048e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e8:	2200      	movs	r2, #0
 80048ea:	673b      	str	r3, [r7, #112]	; 0x70
 80048ec:	677a      	str	r2, [r7, #116]	; 0x74
 80048ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048f2:	4642      	mov	r2, r8
 80048f4:	464b      	mov	r3, r9
 80048f6:	1891      	adds	r1, r2, r2
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	415b      	adcs	r3, r3
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004902:	4641      	mov	r1, r8
 8004904:	1851      	adds	r1, r2, r1
 8004906:	6039      	str	r1, [r7, #0]
 8004908:	4649      	mov	r1, r9
 800490a:	414b      	adcs	r3, r1
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800491a:	4659      	mov	r1, fp
 800491c:	00cb      	lsls	r3, r1, #3
 800491e:	4651      	mov	r1, sl
 8004920:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004924:	4651      	mov	r1, sl
 8004926:	00ca      	lsls	r2, r1, #3
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	4603      	mov	r3, r0
 800492e:	4642      	mov	r2, r8
 8004930:	189b      	adds	r3, r3, r2
 8004932:	66bb      	str	r3, [r7, #104]	; 0x68
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	663b      	str	r3, [r7, #96]	; 0x60
 8004948:	667a      	str	r2, [r7, #100]	; 0x64
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004956:	4649      	mov	r1, r9
 8004958:	008b      	lsls	r3, r1, #2
 800495a:	4641      	mov	r1, r8
 800495c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004960:	4641      	mov	r1, r8
 8004962:	008a      	lsls	r2, r1, #2
 8004964:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004968:	f7fb fc92 	bl	8000290 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004972:	fba3 1302 	umull	r1, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2164      	movs	r1, #100	; 0x64
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4422      	add	r2, r4
 8004998:	609a      	str	r2, [r3, #8]
}
 800499a:	bf00      	nop
 800499c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4d0d      	ldr	r5, [pc, #52]	; (80049f0 <__libc_init_array+0x38>)
 80049bc:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <__libc_init_array+0x3c>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	2600      	movs	r6, #0
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	4d0b      	ldr	r5, [pc, #44]	; (80049f8 <__libc_init_array+0x40>)
 80049ca:	4c0c      	ldr	r4, [pc, #48]	; (80049fc <__libc_init_array+0x44>)
 80049cc:	f001 f824 	bl	8005a18 <_init>
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	2600      	movs	r6, #0
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	08005b44 	.word	0x08005b44
 80049f4:	08005b44 	.word	0x08005b44
 80049f8:	08005b44 	.word	0x08005b44
 80049fc:	08005b48 	.word	0x08005b48

08004a00 <memset>:
 8004a00:	4402      	add	r2, r0
 8004a02:	4603      	mov	r3, r0
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d100      	bne.n	8004a0a <memset+0xa>
 8004a08:	4770      	bx	lr
 8004a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0e:	e7f9      	b.n	8004a04 <memset+0x4>

08004a10 <iprintf>:
 8004a10:	b40f      	push	{r0, r1, r2, r3}
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <iprintf+0x2c>)
 8004a14:	b513      	push	{r0, r1, r4, lr}
 8004a16:	681c      	ldr	r4, [r3, #0]
 8004a18:	b124      	cbz	r4, 8004a24 <iprintf+0x14>
 8004a1a:	69a3      	ldr	r3, [r4, #24]
 8004a1c:	b913      	cbnz	r3, 8004a24 <iprintf+0x14>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 fa5e 	bl	8004ee0 <__sinit>
 8004a24:	ab05      	add	r3, sp, #20
 8004a26:	9a04      	ldr	r2, [sp, #16]
 8004a28:	68a1      	ldr	r1, [r4, #8]
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fc67 	bl	8005300 <_vfiprintf_r>
 8004a32:	b002      	add	sp, #8
 8004a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a38:	b004      	add	sp, #16
 8004a3a:	4770      	bx	lr
 8004a3c:	2000000c 	.word	0x2000000c

08004a40 <_puts_r>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	460e      	mov	r6, r1
 8004a44:	4605      	mov	r5, r0
 8004a46:	b118      	cbz	r0, 8004a50 <_puts_r+0x10>
 8004a48:	6983      	ldr	r3, [r0, #24]
 8004a4a:	b90b      	cbnz	r3, 8004a50 <_puts_r+0x10>
 8004a4c:	f000 fa48 	bl	8004ee0 <__sinit>
 8004a50:	69ab      	ldr	r3, [r5, #24]
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	b913      	cbnz	r3, 8004a5c <_puts_r+0x1c>
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 fa42 	bl	8004ee0 <__sinit>
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <_puts_r+0xd0>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	d120      	bne.n	8004aa4 <_puts_r+0x64>
 8004a62:	686c      	ldr	r4, [r5, #4]
 8004a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d405      	bmi.n	8004a76 <_puts_r+0x36>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	0598      	lsls	r0, r3, #22
 8004a6e:	d402      	bmi.n	8004a76 <_puts_r+0x36>
 8004a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a72:	f000 fad3 	bl	800501c <__retarget_lock_acquire_recursive>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	0719      	lsls	r1, r3, #28
 8004a7a:	d51d      	bpl.n	8004ab8 <_puts_r+0x78>
 8004a7c:	6923      	ldr	r3, [r4, #16]
 8004a7e:	b1db      	cbz	r3, 8004ab8 <_puts_r+0x78>
 8004a80:	3e01      	subs	r6, #1
 8004a82:	68a3      	ldr	r3, [r4, #8]
 8004a84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	bb39      	cbnz	r1, 8004ade <_puts_r+0x9e>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da38      	bge.n	8004b04 <_puts_r+0xc4>
 8004a92:	4622      	mov	r2, r4
 8004a94:	210a      	movs	r1, #10
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 f848 	bl	8004b2c <__swbuf_r>
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d011      	beq.n	8004ac4 <_puts_r+0x84>
 8004aa0:	250a      	movs	r5, #10
 8004aa2:	e011      	b.n	8004ac8 <_puts_r+0x88>
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <_puts_r+0xd4>)
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d101      	bne.n	8004aae <_puts_r+0x6e>
 8004aaa:	68ac      	ldr	r4, [r5, #8]
 8004aac:	e7da      	b.n	8004a64 <_puts_r+0x24>
 8004aae:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <_puts_r+0xd8>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	bf08      	it	eq
 8004ab4:	68ec      	ldreq	r4, [r5, #12]
 8004ab6:	e7d5      	b.n	8004a64 <_puts_r+0x24>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f888 	bl	8004bd0 <__swsetup_r>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0dd      	beq.n	8004a80 <_puts_r+0x40>
 8004ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aca:	07da      	lsls	r2, r3, #31
 8004acc:	d405      	bmi.n	8004ada <_puts_r+0x9a>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	059b      	lsls	r3, r3, #22
 8004ad2:	d402      	bmi.n	8004ada <_puts_r+0x9a>
 8004ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad6:	f000 faa2 	bl	800501e <__retarget_lock_release_recursive>
 8004ada:	4628      	mov	r0, r5
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da04      	bge.n	8004aec <_puts_r+0xac>
 8004ae2:	69a2      	ldr	r2, [r4, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	dc06      	bgt.n	8004af6 <_puts_r+0xb6>
 8004ae8:	290a      	cmp	r1, #10
 8004aea:	d004      	beq.n	8004af6 <_puts_r+0xb6>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	7019      	strb	r1, [r3, #0]
 8004af4:	e7c5      	b.n	8004a82 <_puts_r+0x42>
 8004af6:	4622      	mov	r2, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f817 	bl	8004b2c <__swbuf_r>
 8004afe:	3001      	adds	r0, #1
 8004b00:	d1bf      	bne.n	8004a82 <_puts_r+0x42>
 8004b02:	e7df      	b.n	8004ac4 <_puts_r+0x84>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	250a      	movs	r5, #10
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	701d      	strb	r5, [r3, #0]
 8004b0e:	e7db      	b.n	8004ac8 <_puts_r+0x88>
 8004b10:	08005ac8 	.word	0x08005ac8
 8004b14:	08005ae8 	.word	0x08005ae8
 8004b18:	08005aa8 	.word	0x08005aa8

08004b1c <puts>:
 8004b1c:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <puts+0xc>)
 8004b1e:	4601      	mov	r1, r0
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	f7ff bf8d 	b.w	8004a40 <_puts_r>
 8004b26:	bf00      	nop
 8004b28:	2000000c 	.word	0x2000000c

08004b2c <__swbuf_r>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	460e      	mov	r6, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	4605      	mov	r5, r0
 8004b34:	b118      	cbz	r0, 8004b3e <__swbuf_r+0x12>
 8004b36:	6983      	ldr	r3, [r0, #24]
 8004b38:	b90b      	cbnz	r3, 8004b3e <__swbuf_r+0x12>
 8004b3a:	f000 f9d1 	bl	8004ee0 <__sinit>
 8004b3e:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <__swbuf_r+0x98>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d12b      	bne.n	8004b9c <__swbuf_r+0x70>
 8004b44:	686c      	ldr	r4, [r5, #4]
 8004b46:	69a3      	ldr	r3, [r4, #24]
 8004b48:	60a3      	str	r3, [r4, #8]
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	071a      	lsls	r2, r3, #28
 8004b4e:	d52f      	bpl.n	8004bb0 <__swbuf_r+0x84>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	b36b      	cbz	r3, 8004bb0 <__swbuf_r+0x84>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	6820      	ldr	r0, [r4, #0]
 8004b58:	1ac0      	subs	r0, r0, r3
 8004b5a:	6963      	ldr	r3, [r4, #20]
 8004b5c:	b2f6      	uxtb	r6, r6
 8004b5e:	4283      	cmp	r3, r0
 8004b60:	4637      	mov	r7, r6
 8004b62:	dc04      	bgt.n	8004b6e <__swbuf_r+0x42>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f926 	bl	8004db8 <_fflush_r>
 8004b6c:	bb30      	cbnz	r0, 8004bbc <__swbuf_r+0x90>
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	701e      	strb	r6, [r3, #0]
 8004b7c:	6963      	ldr	r3, [r4, #20]
 8004b7e:	3001      	adds	r0, #1
 8004b80:	4283      	cmp	r3, r0
 8004b82:	d004      	beq.n	8004b8e <__swbuf_r+0x62>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	07db      	lsls	r3, r3, #31
 8004b88:	d506      	bpl.n	8004b98 <__swbuf_r+0x6c>
 8004b8a:	2e0a      	cmp	r6, #10
 8004b8c:	d104      	bne.n	8004b98 <__swbuf_r+0x6c>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 f911 	bl	8004db8 <_fflush_r>
 8004b96:	b988      	cbnz	r0, 8004bbc <__swbuf_r+0x90>
 8004b98:	4638      	mov	r0, r7
 8004b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <__swbuf_r+0x9c>)
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d101      	bne.n	8004ba6 <__swbuf_r+0x7a>
 8004ba2:	68ac      	ldr	r4, [r5, #8]
 8004ba4:	e7cf      	b.n	8004b46 <__swbuf_r+0x1a>
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <__swbuf_r+0xa0>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	bf08      	it	eq
 8004bac:	68ec      	ldreq	r4, [r5, #12]
 8004bae:	e7ca      	b.n	8004b46 <__swbuf_r+0x1a>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f80c 	bl	8004bd0 <__swsetup_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d0cb      	beq.n	8004b54 <__swbuf_r+0x28>
 8004bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc0:	e7ea      	b.n	8004b98 <__swbuf_r+0x6c>
 8004bc2:	bf00      	nop
 8004bc4:	08005ac8 	.word	0x08005ac8
 8004bc8:	08005ae8 	.word	0x08005ae8
 8004bcc:	08005aa8 	.word	0x08005aa8

08004bd0 <__swsetup_r>:
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <__swsetup_r+0xcc>)
 8004bd2:	b570      	push	{r4, r5, r6, lr}
 8004bd4:	681d      	ldr	r5, [r3, #0]
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	b125      	cbz	r5, 8004be6 <__swsetup_r+0x16>
 8004bdc:	69ab      	ldr	r3, [r5, #24]
 8004bde:	b913      	cbnz	r3, 8004be6 <__swsetup_r+0x16>
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 f97d 	bl	8004ee0 <__sinit>
 8004be6:	4b2e      	ldr	r3, [pc, #184]	; (8004ca0 <__swsetup_r+0xd0>)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	d10f      	bne.n	8004c0c <__swsetup_r+0x3c>
 8004bec:	686c      	ldr	r4, [r5, #4]
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bf4:	0719      	lsls	r1, r3, #28
 8004bf6:	d42c      	bmi.n	8004c52 <__swsetup_r+0x82>
 8004bf8:	06dd      	lsls	r5, r3, #27
 8004bfa:	d411      	bmi.n	8004c20 <__swsetup_r+0x50>
 8004bfc:	2309      	movs	r3, #9
 8004bfe:	6033      	str	r3, [r6, #0]
 8004c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0a:	e03e      	b.n	8004c8a <__swsetup_r+0xba>
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <__swsetup_r+0xd4>)
 8004c0e:	429c      	cmp	r4, r3
 8004c10:	d101      	bne.n	8004c16 <__swsetup_r+0x46>
 8004c12:	68ac      	ldr	r4, [r5, #8]
 8004c14:	e7eb      	b.n	8004bee <__swsetup_r+0x1e>
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <__swsetup_r+0xd8>)
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	bf08      	it	eq
 8004c1c:	68ec      	ldreq	r4, [r5, #12]
 8004c1e:	e7e6      	b.n	8004bee <__swsetup_r+0x1e>
 8004c20:	0758      	lsls	r0, r3, #29
 8004c22:	d512      	bpl.n	8004c4a <__swsetup_r+0x7a>
 8004c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c26:	b141      	cbz	r1, 8004c3a <__swsetup_r+0x6a>
 8004c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	d002      	beq.n	8004c36 <__swsetup_r+0x66>
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 fa5b 	bl	80050ec <_free_r>
 8004c36:	2300      	movs	r3, #0
 8004c38:	6363      	str	r3, [r4, #52]	; 0x34
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	2300      	movs	r3, #0
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	b94b      	cbnz	r3, 8004c6a <__swsetup_r+0x9a>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c60:	d003      	beq.n	8004c6a <__swsetup_r+0x9a>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4630      	mov	r0, r6
 8004c66:	f000 fa01 	bl	800506c <__smakebuf_r>
 8004c6a:	89a0      	ldrh	r0, [r4, #12]
 8004c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c70:	f010 0301 	ands.w	r3, r0, #1
 8004c74:	d00a      	beq.n	8004c8c <__swsetup_r+0xbc>
 8004c76:	2300      	movs	r3, #0
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	6963      	ldr	r3, [r4, #20]
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	61a3      	str	r3, [r4, #24]
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	b943      	cbnz	r3, 8004c96 <__swsetup_r+0xc6>
 8004c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c88:	d1ba      	bne.n	8004c00 <__swsetup_r+0x30>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	0781      	lsls	r1, r0, #30
 8004c8e:	bf58      	it	pl
 8004c90:	6963      	ldrpl	r3, [r4, #20]
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	e7f4      	b.n	8004c80 <__swsetup_r+0xb0>
 8004c96:	2000      	movs	r0, #0
 8004c98:	e7f7      	b.n	8004c8a <__swsetup_r+0xba>
 8004c9a:	bf00      	nop
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	08005ac8 	.word	0x08005ac8
 8004ca4:	08005ae8 	.word	0x08005ae8
 8004ca8:	08005aa8 	.word	0x08005aa8

08004cac <__sflush_r>:
 8004cac:	898a      	ldrh	r2, [r1, #12]
 8004cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	0710      	lsls	r0, r2, #28
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	d458      	bmi.n	8004d6c <__sflush_r+0xc0>
 8004cba:	684b      	ldr	r3, [r1, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dc05      	bgt.n	8004ccc <__sflush_r+0x20>
 8004cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dc02      	bgt.n	8004ccc <__sflush_r+0x20>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	d0f9      	beq.n	8004cc6 <__sflush_r+0x1a>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cd8:	682f      	ldr	r7, [r5, #0]
 8004cda:	602b      	str	r3, [r5, #0]
 8004cdc:	d032      	beq.n	8004d44 <__sflush_r+0x98>
 8004cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	075a      	lsls	r2, r3, #29
 8004ce4:	d505      	bpl.n	8004cf2 <__sflush_r+0x46>
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	1ac0      	subs	r0, r0, r3
 8004cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cec:	b10b      	cbz	r3, 8004cf2 <__sflush_r+0x46>
 8004cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf0:	1ac0      	subs	r0, r0, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cf8:	6a21      	ldr	r1, [r4, #32]
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b0      	blx	r6
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	d106      	bne.n	8004d12 <__sflush_r+0x66>
 8004d04:	6829      	ldr	r1, [r5, #0]
 8004d06:	291d      	cmp	r1, #29
 8004d08:	d82c      	bhi.n	8004d64 <__sflush_r+0xb8>
 8004d0a:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <__sflush_r+0x108>)
 8004d0c:	40ca      	lsrs	r2, r1
 8004d0e:	07d6      	lsls	r6, r2, #31
 8004d10:	d528      	bpl.n	8004d64 <__sflush_r+0xb8>
 8004d12:	2200      	movs	r2, #0
 8004d14:	6062      	str	r2, [r4, #4]
 8004d16:	04d9      	lsls	r1, r3, #19
 8004d18:	6922      	ldr	r2, [r4, #16]
 8004d1a:	6022      	str	r2, [r4, #0]
 8004d1c:	d504      	bpl.n	8004d28 <__sflush_r+0x7c>
 8004d1e:	1c42      	adds	r2, r0, #1
 8004d20:	d101      	bne.n	8004d26 <__sflush_r+0x7a>
 8004d22:	682b      	ldr	r3, [r5, #0]
 8004d24:	b903      	cbnz	r3, 8004d28 <__sflush_r+0x7c>
 8004d26:	6560      	str	r0, [r4, #84]	; 0x54
 8004d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d2a:	602f      	str	r7, [r5, #0]
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	d0ca      	beq.n	8004cc6 <__sflush_r+0x1a>
 8004d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d34:	4299      	cmp	r1, r3
 8004d36:	d002      	beq.n	8004d3e <__sflush_r+0x92>
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f9d7 	bl	80050ec <_free_r>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	6360      	str	r0, [r4, #52]	; 0x34
 8004d42:	e7c1      	b.n	8004cc8 <__sflush_r+0x1c>
 8004d44:	6a21      	ldr	r1, [r4, #32]
 8004d46:	2301      	movs	r3, #1
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b0      	blx	r6
 8004d4c:	1c41      	adds	r1, r0, #1
 8004d4e:	d1c7      	bne.n	8004ce0 <__sflush_r+0x34>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0c4      	beq.n	8004ce0 <__sflush_r+0x34>
 8004d56:	2b1d      	cmp	r3, #29
 8004d58:	d001      	beq.n	8004d5e <__sflush_r+0xb2>
 8004d5a:	2b16      	cmp	r3, #22
 8004d5c:	d101      	bne.n	8004d62 <__sflush_r+0xb6>
 8004d5e:	602f      	str	r7, [r5, #0]
 8004d60:	e7b1      	b.n	8004cc6 <__sflush_r+0x1a>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	e7ad      	b.n	8004cc8 <__sflush_r+0x1c>
 8004d6c:	690f      	ldr	r7, [r1, #16]
 8004d6e:	2f00      	cmp	r7, #0
 8004d70:	d0a9      	beq.n	8004cc6 <__sflush_r+0x1a>
 8004d72:	0793      	lsls	r3, r2, #30
 8004d74:	680e      	ldr	r6, [r1, #0]
 8004d76:	bf08      	it	eq
 8004d78:	694b      	ldreq	r3, [r1, #20]
 8004d7a:	600f      	str	r7, [r1, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	2300      	movne	r3, #0
 8004d80:	eba6 0807 	sub.w	r8, r6, r7
 8004d84:	608b      	str	r3, [r1, #8]
 8004d86:	f1b8 0f00 	cmp.w	r8, #0
 8004d8a:	dd9c      	ble.n	8004cc6 <__sflush_r+0x1a>
 8004d8c:	6a21      	ldr	r1, [r4, #32]
 8004d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d90:	4643      	mov	r3, r8
 8004d92:	463a      	mov	r2, r7
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b0      	blx	r6
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	dc06      	bgt.n	8004daa <__sflush_r+0xfe>
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e78e      	b.n	8004cc8 <__sflush_r+0x1c>
 8004daa:	4407      	add	r7, r0
 8004dac:	eba8 0800 	sub.w	r8, r8, r0
 8004db0:	e7e9      	b.n	8004d86 <__sflush_r+0xda>
 8004db2:	bf00      	nop
 8004db4:	20400001 	.word	0x20400001

08004db8 <_fflush_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	690b      	ldr	r3, [r1, #16]
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	b913      	cbnz	r3, 8004dc8 <_fflush_r+0x10>
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	b118      	cbz	r0, 8004dd2 <_fflush_r+0x1a>
 8004dca:	6983      	ldr	r3, [r0, #24]
 8004dcc:	b90b      	cbnz	r3, 8004dd2 <_fflush_r+0x1a>
 8004dce:	f000 f887 	bl	8004ee0 <__sinit>
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <_fflush_r+0x6c>)
 8004dd4:	429c      	cmp	r4, r3
 8004dd6:	d11b      	bne.n	8004e10 <_fflush_r+0x58>
 8004dd8:	686c      	ldr	r4, [r5, #4]
 8004dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0ef      	beq.n	8004dc2 <_fflush_r+0xa>
 8004de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004de4:	07d0      	lsls	r0, r2, #31
 8004de6:	d404      	bmi.n	8004df2 <_fflush_r+0x3a>
 8004de8:	0599      	lsls	r1, r3, #22
 8004dea:	d402      	bmi.n	8004df2 <_fflush_r+0x3a>
 8004dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dee:	f000 f915 	bl	800501c <__retarget_lock_acquire_recursive>
 8004df2:	4628      	mov	r0, r5
 8004df4:	4621      	mov	r1, r4
 8004df6:	f7ff ff59 	bl	8004cac <__sflush_r>
 8004dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dfc:	07da      	lsls	r2, r3, #31
 8004dfe:	4605      	mov	r5, r0
 8004e00:	d4e0      	bmi.n	8004dc4 <_fflush_r+0xc>
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	059b      	lsls	r3, r3, #22
 8004e06:	d4dd      	bmi.n	8004dc4 <_fflush_r+0xc>
 8004e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0a:	f000 f908 	bl	800501e <__retarget_lock_release_recursive>
 8004e0e:	e7d9      	b.n	8004dc4 <_fflush_r+0xc>
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <_fflush_r+0x70>)
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d101      	bne.n	8004e1a <_fflush_r+0x62>
 8004e16:	68ac      	ldr	r4, [r5, #8]
 8004e18:	e7df      	b.n	8004dda <_fflush_r+0x22>
 8004e1a:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <_fflush_r+0x74>)
 8004e1c:	429c      	cmp	r4, r3
 8004e1e:	bf08      	it	eq
 8004e20:	68ec      	ldreq	r4, [r5, #12]
 8004e22:	e7da      	b.n	8004dda <_fflush_r+0x22>
 8004e24:	08005ac8 	.word	0x08005ac8
 8004e28:	08005ae8 	.word	0x08005ae8
 8004e2c:	08005aa8 	.word	0x08005aa8

08004e30 <std>:
 8004e30:	2300      	movs	r3, #0
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e3e:	6083      	str	r3, [r0, #8]
 8004e40:	8181      	strh	r1, [r0, #12]
 8004e42:	6643      	str	r3, [r0, #100]	; 0x64
 8004e44:	81c2      	strh	r2, [r0, #14]
 8004e46:	6183      	str	r3, [r0, #24]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	305c      	adds	r0, #92	; 0x5c
 8004e4e:	f7ff fdd7 	bl	8004a00 <memset>
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <std+0x38>)
 8004e54:	6263      	str	r3, [r4, #36]	; 0x24
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <std+0x3c>)
 8004e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <std+0x40>)
 8004e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <std+0x44>)
 8004e60:	6224      	str	r4, [r4, #32]
 8004e62:	6323      	str	r3, [r4, #48]	; 0x30
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	bf00      	nop
 8004e68:	080058a9 	.word	0x080058a9
 8004e6c:	080058cb 	.word	0x080058cb
 8004e70:	08005903 	.word	0x08005903
 8004e74:	08005927 	.word	0x08005927

08004e78 <_cleanup_r>:
 8004e78:	4901      	ldr	r1, [pc, #4]	; (8004e80 <_cleanup_r+0x8>)
 8004e7a:	f000 b8af 	b.w	8004fdc <_fwalk_reent>
 8004e7e:	bf00      	nop
 8004e80:	08004db9 	.word	0x08004db9

08004e84 <__sfmoreglue>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	2268      	movs	r2, #104	; 0x68
 8004e88:	1e4d      	subs	r5, r1, #1
 8004e8a:	4355      	muls	r5, r2
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e92:	f000 f997 	bl	80051c4 <_malloc_r>
 8004e96:	4604      	mov	r4, r0
 8004e98:	b140      	cbz	r0, 8004eac <__sfmoreglue+0x28>
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004ea0:	300c      	adds	r0, #12
 8004ea2:	60a0      	str	r0, [r4, #8]
 8004ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ea8:	f7ff fdaa 	bl	8004a00 <memset>
 8004eac:	4620      	mov	r0, r4
 8004eae:	bd70      	pop	{r4, r5, r6, pc}

08004eb0 <__sfp_lock_acquire>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <__sfp_lock_acquire+0x8>)
 8004eb2:	f000 b8b3 	b.w	800501c <__retarget_lock_acquire_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	200001b1 	.word	0x200001b1

08004ebc <__sfp_lock_release>:
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <__sfp_lock_release+0x8>)
 8004ebe:	f000 b8ae 	b.w	800501e <__retarget_lock_release_recursive>
 8004ec2:	bf00      	nop
 8004ec4:	200001b1 	.word	0x200001b1

08004ec8 <__sinit_lock_acquire>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__sinit_lock_acquire+0x8>)
 8004eca:	f000 b8a7 	b.w	800501c <__retarget_lock_acquire_recursive>
 8004ece:	bf00      	nop
 8004ed0:	200001b2 	.word	0x200001b2

08004ed4 <__sinit_lock_release>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <__sinit_lock_release+0x8>)
 8004ed6:	f000 b8a2 	b.w	800501e <__retarget_lock_release_recursive>
 8004eda:	bf00      	nop
 8004edc:	200001b2 	.word	0x200001b2

08004ee0 <__sinit>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	f7ff fff0 	bl	8004ec8 <__sinit_lock_acquire>
 8004ee8:	69a3      	ldr	r3, [r4, #24]
 8004eea:	b11b      	cbz	r3, 8004ef4 <__sinit+0x14>
 8004eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef0:	f7ff bff0 	b.w	8004ed4 <__sinit_lock_release>
 8004ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <__sinit+0x68>)
 8004efc:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <__sinit+0x6c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	bf04      	itt	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	61a3      	streq	r3, [r4, #24]
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 f820 	bl	8004f50 <__sfp>
 8004f10:	6060      	str	r0, [r4, #4]
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f81c 	bl	8004f50 <__sfp>
 8004f18:	60a0      	str	r0, [r4, #8]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f818 	bl	8004f50 <__sfp>
 8004f20:	2200      	movs	r2, #0
 8004f22:	60e0      	str	r0, [r4, #12]
 8004f24:	2104      	movs	r1, #4
 8004f26:	6860      	ldr	r0, [r4, #4]
 8004f28:	f7ff ff82 	bl	8004e30 <std>
 8004f2c:	68a0      	ldr	r0, [r4, #8]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	2109      	movs	r1, #9
 8004f32:	f7ff ff7d 	bl	8004e30 <std>
 8004f36:	68e0      	ldr	r0, [r4, #12]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	2112      	movs	r1, #18
 8004f3c:	f7ff ff78 	bl	8004e30 <std>
 8004f40:	2301      	movs	r3, #1
 8004f42:	61a3      	str	r3, [r4, #24]
 8004f44:	e7d2      	b.n	8004eec <__sinit+0xc>
 8004f46:	bf00      	nop
 8004f48:	08005aa4 	.word	0x08005aa4
 8004f4c:	08004e79 	.word	0x08004e79

08004f50 <__sfp>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	4607      	mov	r7, r0
 8004f54:	f7ff ffac 	bl	8004eb0 <__sfp_lock_acquire>
 8004f58:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <__sfp+0x84>)
 8004f5a:	681e      	ldr	r6, [r3, #0]
 8004f5c:	69b3      	ldr	r3, [r6, #24]
 8004f5e:	b913      	cbnz	r3, 8004f66 <__sfp+0x16>
 8004f60:	4630      	mov	r0, r6
 8004f62:	f7ff ffbd 	bl	8004ee0 <__sinit>
 8004f66:	3648      	adds	r6, #72	; 0x48
 8004f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	d503      	bpl.n	8004f78 <__sfp+0x28>
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	b30b      	cbz	r3, 8004fb8 <__sfp+0x68>
 8004f74:	6836      	ldr	r6, [r6, #0]
 8004f76:	e7f7      	b.n	8004f68 <__sfp+0x18>
 8004f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f7c:	b9d5      	cbnz	r5, 8004fb4 <__sfp+0x64>
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <__sfp+0x88>)
 8004f80:	60e3      	str	r3, [r4, #12]
 8004f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f86:	6665      	str	r5, [r4, #100]	; 0x64
 8004f88:	f000 f847 	bl	800501a <__retarget_lock_init_recursive>
 8004f8c:	f7ff ff96 	bl	8004ebc <__sfp_lock_release>
 8004f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f98:	6025      	str	r5, [r4, #0]
 8004f9a:	61a5      	str	r5, [r4, #24]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fa4:	f7ff fd2c 	bl	8004a00 <memset>
 8004fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb4:	3468      	adds	r4, #104	; 0x68
 8004fb6:	e7d9      	b.n	8004f6c <__sfp+0x1c>
 8004fb8:	2104      	movs	r1, #4
 8004fba:	4638      	mov	r0, r7
 8004fbc:	f7ff ff62 	bl	8004e84 <__sfmoreglue>
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	6030      	str	r0, [r6, #0]
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d1d5      	bne.n	8004f74 <__sfp+0x24>
 8004fc8:	f7ff ff78 	bl	8004ebc <__sfp_lock_release>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	e7ee      	b.n	8004fb0 <__sfp+0x60>
 8004fd2:	bf00      	nop
 8004fd4:	08005aa4 	.word	0x08005aa4
 8004fd8:	ffff0001 	.word	0xffff0001

08004fdc <_fwalk_reent>:
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	4688      	mov	r8, r1
 8004fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fe8:	2700      	movs	r7, #0
 8004fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fee:	f1b9 0901 	subs.w	r9, r9, #1
 8004ff2:	d505      	bpl.n	8005000 <_fwalk_reent+0x24>
 8004ff4:	6824      	ldr	r4, [r4, #0]
 8004ff6:	2c00      	cmp	r4, #0
 8004ff8:	d1f7      	bne.n	8004fea <_fwalk_reent+0xe>
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005000:	89ab      	ldrh	r3, [r5, #12]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d907      	bls.n	8005016 <_fwalk_reent+0x3a>
 8005006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800500a:	3301      	adds	r3, #1
 800500c:	d003      	beq.n	8005016 <_fwalk_reent+0x3a>
 800500e:	4629      	mov	r1, r5
 8005010:	4630      	mov	r0, r6
 8005012:	47c0      	blx	r8
 8005014:	4307      	orrs	r7, r0
 8005016:	3568      	adds	r5, #104	; 0x68
 8005018:	e7e9      	b.n	8004fee <_fwalk_reent+0x12>

0800501a <__retarget_lock_init_recursive>:
 800501a:	4770      	bx	lr

0800501c <__retarget_lock_acquire_recursive>:
 800501c:	4770      	bx	lr

0800501e <__retarget_lock_release_recursive>:
 800501e:	4770      	bx	lr

08005020 <__swhatbuf_r>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	460e      	mov	r6, r1
 8005024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005028:	2900      	cmp	r1, #0
 800502a:	b096      	sub	sp, #88	; 0x58
 800502c:	4614      	mov	r4, r2
 800502e:	461d      	mov	r5, r3
 8005030:	da08      	bge.n	8005044 <__swhatbuf_r+0x24>
 8005032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	061a      	lsls	r2, r3, #24
 800503c:	d410      	bmi.n	8005060 <__swhatbuf_r+0x40>
 800503e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005042:	e00e      	b.n	8005062 <__swhatbuf_r+0x42>
 8005044:	466a      	mov	r2, sp
 8005046:	f000 fc95 	bl	8005974 <_fstat_r>
 800504a:	2800      	cmp	r0, #0
 800504c:	dbf1      	blt.n	8005032 <__swhatbuf_r+0x12>
 800504e:	9a01      	ldr	r2, [sp, #4]
 8005050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005058:	425a      	negs	r2, r3
 800505a:	415a      	adcs	r2, r3
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	e7ee      	b.n	800503e <__swhatbuf_r+0x1e>
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	2000      	movs	r0, #0
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	b016      	add	sp, #88	; 0x58
 8005068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800506c <__smakebuf_r>:
 800506c:	898b      	ldrh	r3, [r1, #12]
 800506e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005070:	079d      	lsls	r5, r3, #30
 8005072:	4606      	mov	r6, r0
 8005074:	460c      	mov	r4, r1
 8005076:	d507      	bpl.n	8005088 <__smakebuf_r+0x1c>
 8005078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	6123      	str	r3, [r4, #16]
 8005080:	2301      	movs	r3, #1
 8005082:	6163      	str	r3, [r4, #20]
 8005084:	b002      	add	sp, #8
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	ab01      	add	r3, sp, #4
 800508a:	466a      	mov	r2, sp
 800508c:	f7ff ffc8 	bl	8005020 <__swhatbuf_r>
 8005090:	9900      	ldr	r1, [sp, #0]
 8005092:	4605      	mov	r5, r0
 8005094:	4630      	mov	r0, r6
 8005096:	f000 f895 	bl	80051c4 <_malloc_r>
 800509a:	b948      	cbnz	r0, 80050b0 <__smakebuf_r+0x44>
 800509c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a0:	059a      	lsls	r2, r3, #22
 80050a2:	d4ef      	bmi.n	8005084 <__smakebuf_r+0x18>
 80050a4:	f023 0303 	bic.w	r3, r3, #3
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	e7e3      	b.n	8005078 <__smakebuf_r+0xc>
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <__smakebuf_r+0x7c>)
 80050b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	6020      	str	r0, [r4, #0]
 80050b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	9b00      	ldr	r3, [sp, #0]
 80050c0:	6163      	str	r3, [r4, #20]
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	6120      	str	r0, [r4, #16]
 80050c6:	b15b      	cbz	r3, 80050e0 <__smakebuf_r+0x74>
 80050c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 fc63 	bl	8005998 <_isatty_r>
 80050d2:	b128      	cbz	r0, 80050e0 <__smakebuf_r+0x74>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	89a0      	ldrh	r0, [r4, #12]
 80050e2:	4305      	orrs	r5, r0
 80050e4:	81a5      	strh	r5, [r4, #12]
 80050e6:	e7cd      	b.n	8005084 <__smakebuf_r+0x18>
 80050e8:	08004e79 	.word	0x08004e79

080050ec <_free_r>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d044      	beq.n	800517c <_free_r+0x90>
 80050f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f6:	9001      	str	r0, [sp, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f1a1 0404 	sub.w	r4, r1, #4
 80050fe:	bfb8      	it	lt
 8005100:	18e4      	addlt	r4, r4, r3
 8005102:	f000 fc6b 	bl	80059dc <__malloc_lock>
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <_free_r+0x94>)
 8005108:	9801      	ldr	r0, [sp, #4]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	b933      	cbnz	r3, 800511c <_free_r+0x30>
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	6014      	str	r4, [r2, #0]
 8005112:	b003      	add	sp, #12
 8005114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005118:	f000 bc66 	b.w	80059e8 <__malloc_unlock>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d908      	bls.n	8005132 <_free_r+0x46>
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1961      	adds	r1, r4, r5
 8005124:	428b      	cmp	r3, r1
 8005126:	bf01      	itttt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	1949      	addeq	r1, r1, r5
 800512e:	6021      	streq	r1, [r4, #0]
 8005130:	e7ed      	b.n	800510e <_free_r+0x22>
 8005132:	461a      	mov	r2, r3
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b10b      	cbz	r3, 800513c <_free_r+0x50>
 8005138:	42a3      	cmp	r3, r4
 800513a:	d9fa      	bls.n	8005132 <_free_r+0x46>
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	1855      	adds	r5, r2, r1
 8005140:	42a5      	cmp	r5, r4
 8005142:	d10b      	bne.n	800515c <_free_r+0x70>
 8005144:	6824      	ldr	r4, [r4, #0]
 8005146:	4421      	add	r1, r4
 8005148:	1854      	adds	r4, r2, r1
 800514a:	42a3      	cmp	r3, r4
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	d1e0      	bne.n	8005112 <_free_r+0x26>
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6053      	str	r3, [r2, #4]
 8005156:	4421      	add	r1, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e7da      	b.n	8005112 <_free_r+0x26>
 800515c:	d902      	bls.n	8005164 <_free_r+0x78>
 800515e:	230c      	movs	r3, #12
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	e7d6      	b.n	8005112 <_free_r+0x26>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf04      	itt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	bf04      	itt	eq
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6054      	str	r4, [r2, #4]
 800517a:	e7ca      	b.n	8005112 <_free_r+0x26>
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	200001b4 	.word	0x200001b4

08005184 <sbrk_aligned>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4e0e      	ldr	r6, [pc, #56]	; (80051c0 <sbrk_aligned+0x3c>)
 8005188:	460c      	mov	r4, r1
 800518a:	6831      	ldr	r1, [r6, #0]
 800518c:	4605      	mov	r5, r0
 800518e:	b911      	cbnz	r1, 8005196 <sbrk_aligned+0x12>
 8005190:	f000 fb7a 	bl	8005888 <_sbrk_r>
 8005194:	6030      	str	r0, [r6, #0]
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 fb75 	bl	8005888 <_sbrk_r>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d00a      	beq.n	80051b8 <sbrk_aligned+0x34>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d007      	beq.n	80051bc <sbrk_aligned+0x38>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 fb6a 	bl	8005888 <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d101      	bne.n	80051bc <sbrk_aligned+0x38>
 80051b8:	f04f 34ff 	mov.w	r4, #4294967295
 80051bc:	4620      	mov	r0, r4
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	200001b8 	.word	0x200001b8

080051c4 <_malloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4607      	mov	r7, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d905      	bls.n	80051ec <_malloc_r+0x28>
 80051e0:	230c      	movs	r3, #12
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	2600      	movs	r6, #0
 80051e6:	4630      	mov	r0, r6
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	4e2e      	ldr	r6, [pc, #184]	; (80052a8 <_malloc_r+0xe4>)
 80051ee:	f000 fbf5 	bl	80059dc <__malloc_lock>
 80051f2:	6833      	ldr	r3, [r6, #0]
 80051f4:	461c      	mov	r4, r3
 80051f6:	bb34      	cbnz	r4, 8005246 <_malloc_r+0x82>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff ffc2 	bl	8005184 <sbrk_aligned>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	4604      	mov	r4, r0
 8005204:	d14d      	bne.n	80052a2 <_malloc_r+0xde>
 8005206:	6834      	ldr	r4, [r6, #0]
 8005208:	4626      	mov	r6, r4
 800520a:	2e00      	cmp	r6, #0
 800520c:	d140      	bne.n	8005290 <_malloc_r+0xcc>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	4631      	mov	r1, r6
 8005212:	4638      	mov	r0, r7
 8005214:	eb04 0803 	add.w	r8, r4, r3
 8005218:	f000 fb36 	bl	8005888 <_sbrk_r>
 800521c:	4580      	cmp	r8, r0
 800521e:	d13a      	bne.n	8005296 <_malloc_r+0xd2>
 8005220:	6821      	ldr	r1, [r4, #0]
 8005222:	3503      	adds	r5, #3
 8005224:	1a6d      	subs	r5, r5, r1
 8005226:	f025 0503 	bic.w	r5, r5, #3
 800522a:	3508      	adds	r5, #8
 800522c:	2d0c      	cmp	r5, #12
 800522e:	bf38      	it	cc
 8005230:	250c      	movcc	r5, #12
 8005232:	4629      	mov	r1, r5
 8005234:	4638      	mov	r0, r7
 8005236:	f7ff ffa5 	bl	8005184 <sbrk_aligned>
 800523a:	3001      	adds	r0, #1
 800523c:	d02b      	beq.n	8005296 <_malloc_r+0xd2>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	442b      	add	r3, r5
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	e00e      	b.n	8005264 <_malloc_r+0xa0>
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	1b52      	subs	r2, r2, r5
 800524a:	d41e      	bmi.n	800528a <_malloc_r+0xc6>
 800524c:	2a0b      	cmp	r2, #11
 800524e:	d916      	bls.n	800527e <_malloc_r+0xba>
 8005250:	1961      	adds	r1, r4, r5
 8005252:	42a3      	cmp	r3, r4
 8005254:	6025      	str	r5, [r4, #0]
 8005256:	bf18      	it	ne
 8005258:	6059      	strne	r1, [r3, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	bf08      	it	eq
 800525e:	6031      	streq	r1, [r6, #0]
 8005260:	5162      	str	r2, [r4, r5]
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	4638      	mov	r0, r7
 8005266:	f104 060b 	add.w	r6, r4, #11
 800526a:	f000 fbbd 	bl	80059e8 <__malloc_unlock>
 800526e:	f026 0607 	bic.w	r6, r6, #7
 8005272:	1d23      	adds	r3, r4, #4
 8005274:	1af2      	subs	r2, r6, r3
 8005276:	d0b6      	beq.n	80051e6 <_malloc_r+0x22>
 8005278:	1b9b      	subs	r3, r3, r6
 800527a:	50a3      	str	r3, [r4, r2]
 800527c:	e7b3      	b.n	80051e6 <_malloc_r+0x22>
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	bf0c      	ite	eq
 8005284:	6032      	streq	r2, [r6, #0]
 8005286:	605a      	strne	r2, [r3, #4]
 8005288:	e7ec      	b.n	8005264 <_malloc_r+0xa0>
 800528a:	4623      	mov	r3, r4
 800528c:	6864      	ldr	r4, [r4, #4]
 800528e:	e7b2      	b.n	80051f6 <_malloc_r+0x32>
 8005290:	4634      	mov	r4, r6
 8005292:	6876      	ldr	r6, [r6, #4]
 8005294:	e7b9      	b.n	800520a <_malloc_r+0x46>
 8005296:	230c      	movs	r3, #12
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4638      	mov	r0, r7
 800529c:	f000 fba4 	bl	80059e8 <__malloc_unlock>
 80052a0:	e7a1      	b.n	80051e6 <_malloc_r+0x22>
 80052a2:	6025      	str	r5, [r4, #0]
 80052a4:	e7de      	b.n	8005264 <_malloc_r+0xa0>
 80052a6:	bf00      	nop
 80052a8:	200001b4 	.word	0x200001b4

080052ac <__sfputc_r>:
 80052ac:	6893      	ldr	r3, [r2, #8]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	b410      	push	{r4}
 80052b4:	6093      	str	r3, [r2, #8]
 80052b6:	da08      	bge.n	80052ca <__sfputc_r+0x1e>
 80052b8:	6994      	ldr	r4, [r2, #24]
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	db01      	blt.n	80052c2 <__sfputc_r+0x16>
 80052be:	290a      	cmp	r1, #10
 80052c0:	d103      	bne.n	80052ca <__sfputc_r+0x1e>
 80052c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c6:	f7ff bc31 	b.w	8004b2c <__swbuf_r>
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	1c58      	adds	r0, r3, #1
 80052ce:	6010      	str	r0, [r2, #0]
 80052d0:	7019      	strb	r1, [r3, #0]
 80052d2:	4608      	mov	r0, r1
 80052d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d8:	4770      	bx	lr

080052da <__sfputs_r>:
 80052da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052dc:	4606      	mov	r6, r0
 80052de:	460f      	mov	r7, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	18d5      	adds	r5, r2, r3
 80052e4:	42ac      	cmp	r4, r5
 80052e6:	d101      	bne.n	80052ec <__sfputs_r+0x12>
 80052e8:	2000      	movs	r0, #0
 80052ea:	e007      	b.n	80052fc <__sfputs_r+0x22>
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	463a      	mov	r2, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ffda 	bl	80052ac <__sfputc_r>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d1f3      	bne.n	80052e4 <__sfputs_r+0xa>
 80052fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005300 <_vfiprintf_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	460d      	mov	r5, r1
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4614      	mov	r4, r2
 800530a:	4698      	mov	r8, r3
 800530c:	4606      	mov	r6, r0
 800530e:	b118      	cbz	r0, 8005318 <_vfiprintf_r+0x18>
 8005310:	6983      	ldr	r3, [r0, #24]
 8005312:	b90b      	cbnz	r3, 8005318 <_vfiprintf_r+0x18>
 8005314:	f7ff fde4 	bl	8004ee0 <__sinit>
 8005318:	4b89      	ldr	r3, [pc, #548]	; (8005540 <_vfiprintf_r+0x240>)
 800531a:	429d      	cmp	r5, r3
 800531c:	d11b      	bne.n	8005356 <_vfiprintf_r+0x56>
 800531e:	6875      	ldr	r5, [r6, #4]
 8005320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	d405      	bmi.n	8005332 <_vfiprintf_r+0x32>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	059a      	lsls	r2, r3, #22
 800532a:	d402      	bmi.n	8005332 <_vfiprintf_r+0x32>
 800532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800532e:	f7ff fe75 	bl	800501c <__retarget_lock_acquire_recursive>
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	d501      	bpl.n	800533c <_vfiprintf_r+0x3c>
 8005338:	692b      	ldr	r3, [r5, #16]
 800533a:	b9eb      	cbnz	r3, 8005378 <_vfiprintf_r+0x78>
 800533c:	4629      	mov	r1, r5
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff fc46 	bl	8004bd0 <__swsetup_r>
 8005344:	b1c0      	cbz	r0, 8005378 <_vfiprintf_r+0x78>
 8005346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005348:	07dc      	lsls	r4, r3, #31
 800534a:	d50e      	bpl.n	800536a <_vfiprintf_r+0x6a>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	b01d      	add	sp, #116	; 0x74
 8005352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005356:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <_vfiprintf_r+0x244>)
 8005358:	429d      	cmp	r5, r3
 800535a:	d101      	bne.n	8005360 <_vfiprintf_r+0x60>
 800535c:	68b5      	ldr	r5, [r6, #8]
 800535e:	e7df      	b.n	8005320 <_vfiprintf_r+0x20>
 8005360:	4b79      	ldr	r3, [pc, #484]	; (8005548 <_vfiprintf_r+0x248>)
 8005362:	429d      	cmp	r5, r3
 8005364:	bf08      	it	eq
 8005366:	68f5      	ldreq	r5, [r6, #12]
 8005368:	e7da      	b.n	8005320 <_vfiprintf_r+0x20>
 800536a:	89ab      	ldrh	r3, [r5, #12]
 800536c:	0598      	lsls	r0, r3, #22
 800536e:	d4ed      	bmi.n	800534c <_vfiprintf_r+0x4c>
 8005370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005372:	f7ff fe54 	bl	800501e <__retarget_lock_release_recursive>
 8005376:	e7e9      	b.n	800534c <_vfiprintf_r+0x4c>
 8005378:	2300      	movs	r3, #0
 800537a:	9309      	str	r3, [sp, #36]	; 0x24
 800537c:	2320      	movs	r3, #32
 800537e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005382:	f8cd 800c 	str.w	r8, [sp, #12]
 8005386:	2330      	movs	r3, #48	; 0x30
 8005388:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800554c <_vfiprintf_r+0x24c>
 800538c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005390:	f04f 0901 	mov.w	r9, #1
 8005394:	4623      	mov	r3, r4
 8005396:	469a      	mov	sl, r3
 8005398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800539c:	b10a      	cbz	r2, 80053a2 <_vfiprintf_r+0xa2>
 800539e:	2a25      	cmp	r2, #37	; 0x25
 80053a0:	d1f9      	bne.n	8005396 <_vfiprintf_r+0x96>
 80053a2:	ebba 0b04 	subs.w	fp, sl, r4
 80053a6:	d00b      	beq.n	80053c0 <_vfiprintf_r+0xc0>
 80053a8:	465b      	mov	r3, fp
 80053aa:	4622      	mov	r2, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	4630      	mov	r0, r6
 80053b0:	f7ff ff93 	bl	80052da <__sfputs_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	f000 80aa 	beq.w	800550e <_vfiprintf_r+0x20e>
 80053ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053bc:	445a      	add	r2, fp
 80053be:	9209      	str	r2, [sp, #36]	; 0x24
 80053c0:	f89a 3000 	ldrb.w	r3, [sl]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a2 	beq.w	800550e <_vfiprintf_r+0x20e>
 80053ca:	2300      	movs	r3, #0
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295
 80053d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053d4:	f10a 0a01 	add.w	sl, sl, #1
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	9307      	str	r3, [sp, #28]
 80053dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e0:	931a      	str	r3, [sp, #104]	; 0x68
 80053e2:	4654      	mov	r4, sl
 80053e4:	2205      	movs	r2, #5
 80053e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ea:	4858      	ldr	r0, [pc, #352]	; (800554c <_vfiprintf_r+0x24c>)
 80053ec:	f7fa ff00 	bl	80001f0 <memchr>
 80053f0:	9a04      	ldr	r2, [sp, #16]
 80053f2:	b9d8      	cbnz	r0, 800542c <_vfiprintf_r+0x12c>
 80053f4:	06d1      	lsls	r1, r2, #27
 80053f6:	bf44      	itt	mi
 80053f8:	2320      	movmi	r3, #32
 80053fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fe:	0713      	lsls	r3, r2, #28
 8005400:	bf44      	itt	mi
 8005402:	232b      	movmi	r3, #43	; 0x2b
 8005404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005408:	f89a 3000 	ldrb.w	r3, [sl]
 800540c:	2b2a      	cmp	r3, #42	; 0x2a
 800540e:	d015      	beq.n	800543c <_vfiprintf_r+0x13c>
 8005410:	9a07      	ldr	r2, [sp, #28]
 8005412:	4654      	mov	r4, sl
 8005414:	2000      	movs	r0, #0
 8005416:	f04f 0c0a 	mov.w	ip, #10
 800541a:	4621      	mov	r1, r4
 800541c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005420:	3b30      	subs	r3, #48	; 0x30
 8005422:	2b09      	cmp	r3, #9
 8005424:	d94e      	bls.n	80054c4 <_vfiprintf_r+0x1c4>
 8005426:	b1b0      	cbz	r0, 8005456 <_vfiprintf_r+0x156>
 8005428:	9207      	str	r2, [sp, #28]
 800542a:	e014      	b.n	8005456 <_vfiprintf_r+0x156>
 800542c:	eba0 0308 	sub.w	r3, r0, r8
 8005430:	fa09 f303 	lsl.w	r3, r9, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	46a2      	mov	sl, r4
 800543a:	e7d2      	b.n	80053e2 <_vfiprintf_r+0xe2>
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	1d19      	adds	r1, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	9103      	str	r1, [sp, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	bfbb      	ittet	lt
 8005448:	425b      	neglt	r3, r3
 800544a:	f042 0202 	orrlt.w	r2, r2, #2
 800544e:	9307      	strge	r3, [sp, #28]
 8005450:	9307      	strlt	r3, [sp, #28]
 8005452:	bfb8      	it	lt
 8005454:	9204      	strlt	r2, [sp, #16]
 8005456:	7823      	ldrb	r3, [r4, #0]
 8005458:	2b2e      	cmp	r3, #46	; 0x2e
 800545a:	d10c      	bne.n	8005476 <_vfiprintf_r+0x176>
 800545c:	7863      	ldrb	r3, [r4, #1]
 800545e:	2b2a      	cmp	r3, #42	; 0x2a
 8005460:	d135      	bne.n	80054ce <_vfiprintf_r+0x1ce>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	9203      	str	r2, [sp, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	bfb8      	it	lt
 800546e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005472:	3402      	adds	r4, #2
 8005474:	9305      	str	r3, [sp, #20]
 8005476:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800555c <_vfiprintf_r+0x25c>
 800547a:	7821      	ldrb	r1, [r4, #0]
 800547c:	2203      	movs	r2, #3
 800547e:	4650      	mov	r0, sl
 8005480:	f7fa feb6 	bl	80001f0 <memchr>
 8005484:	b140      	cbz	r0, 8005498 <_vfiprintf_r+0x198>
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	eba0 000a 	sub.w	r0, r0, sl
 800548c:	fa03 f000 	lsl.w	r0, r3, r0
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	4303      	orrs	r3, r0
 8005494:	3401      	adds	r4, #1
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549c:	482c      	ldr	r0, [pc, #176]	; (8005550 <_vfiprintf_r+0x250>)
 800549e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a2:	2206      	movs	r2, #6
 80054a4:	f7fa fea4 	bl	80001f0 <memchr>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d03f      	beq.n	800552c <_vfiprintf_r+0x22c>
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <_vfiprintf_r+0x254>)
 80054ae:	bb1b      	cbnz	r3, 80054f8 <_vfiprintf_r+0x1f8>
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	3307      	adds	r3, #7
 80054b4:	f023 0307 	bic.w	r3, r3, #7
 80054b8:	3308      	adds	r3, #8
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054be:	443b      	add	r3, r7
 80054c0:	9309      	str	r3, [sp, #36]	; 0x24
 80054c2:	e767      	b.n	8005394 <_vfiprintf_r+0x94>
 80054c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054c8:	460c      	mov	r4, r1
 80054ca:	2001      	movs	r0, #1
 80054cc:	e7a5      	b.n	800541a <_vfiprintf_r+0x11a>
 80054ce:	2300      	movs	r3, #0
 80054d0:	3401      	adds	r4, #1
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	4619      	mov	r1, r3
 80054d6:	f04f 0c0a 	mov.w	ip, #10
 80054da:	4620      	mov	r0, r4
 80054dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e0:	3a30      	subs	r2, #48	; 0x30
 80054e2:	2a09      	cmp	r2, #9
 80054e4:	d903      	bls.n	80054ee <_vfiprintf_r+0x1ee>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c5      	beq.n	8005476 <_vfiprintf_r+0x176>
 80054ea:	9105      	str	r1, [sp, #20]
 80054ec:	e7c3      	b.n	8005476 <_vfiprintf_r+0x176>
 80054ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f2:	4604      	mov	r4, r0
 80054f4:	2301      	movs	r3, #1
 80054f6:	e7f0      	b.n	80054da <_vfiprintf_r+0x1da>
 80054f8:	ab03      	add	r3, sp, #12
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	462a      	mov	r2, r5
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <_vfiprintf_r+0x258>)
 8005500:	a904      	add	r1, sp, #16
 8005502:	4630      	mov	r0, r6
 8005504:	f3af 8000 	nop.w
 8005508:	4607      	mov	r7, r0
 800550a:	1c78      	adds	r0, r7, #1
 800550c:	d1d6      	bne.n	80054bc <_vfiprintf_r+0x1bc>
 800550e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005510:	07d9      	lsls	r1, r3, #31
 8005512:	d405      	bmi.n	8005520 <_vfiprintf_r+0x220>
 8005514:	89ab      	ldrh	r3, [r5, #12]
 8005516:	059a      	lsls	r2, r3, #22
 8005518:	d402      	bmi.n	8005520 <_vfiprintf_r+0x220>
 800551a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551c:	f7ff fd7f 	bl	800501e <__retarget_lock_release_recursive>
 8005520:	89ab      	ldrh	r3, [r5, #12]
 8005522:	065b      	lsls	r3, r3, #25
 8005524:	f53f af12 	bmi.w	800534c <_vfiprintf_r+0x4c>
 8005528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800552a:	e711      	b.n	8005350 <_vfiprintf_r+0x50>
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	462a      	mov	r2, r5
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <_vfiprintf_r+0x258>)
 8005534:	a904      	add	r1, sp, #16
 8005536:	4630      	mov	r0, r6
 8005538:	f000 f880 	bl	800563c <_printf_i>
 800553c:	e7e4      	b.n	8005508 <_vfiprintf_r+0x208>
 800553e:	bf00      	nop
 8005540:	08005ac8 	.word	0x08005ac8
 8005544:	08005ae8 	.word	0x08005ae8
 8005548:	08005aa8 	.word	0x08005aa8
 800554c:	08005b08 	.word	0x08005b08
 8005550:	08005b12 	.word	0x08005b12
 8005554:	00000000 	.word	0x00000000
 8005558:	080052db 	.word	0x080052db
 800555c:	08005b0e 	.word	0x08005b0e

08005560 <_printf_common>:
 8005560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	4616      	mov	r6, r2
 8005566:	4699      	mov	r9, r3
 8005568:	688a      	ldr	r2, [r1, #8]
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005570:	4293      	cmp	r3, r2
 8005572:	bfb8      	it	lt
 8005574:	4613      	movlt	r3, r2
 8005576:	6033      	str	r3, [r6, #0]
 8005578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800557c:	4607      	mov	r7, r0
 800557e:	460c      	mov	r4, r1
 8005580:	b10a      	cbz	r2, 8005586 <_printf_common+0x26>
 8005582:	3301      	adds	r3, #1
 8005584:	6033      	str	r3, [r6, #0]
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	0699      	lsls	r1, r3, #26
 800558a:	bf42      	ittt	mi
 800558c:	6833      	ldrmi	r3, [r6, #0]
 800558e:	3302      	addmi	r3, #2
 8005590:	6033      	strmi	r3, [r6, #0]
 8005592:	6825      	ldr	r5, [r4, #0]
 8005594:	f015 0506 	ands.w	r5, r5, #6
 8005598:	d106      	bne.n	80055a8 <_printf_common+0x48>
 800559a:	f104 0a19 	add.w	sl, r4, #25
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	6832      	ldr	r2, [r6, #0]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dc26      	bgt.n	80055f6 <_printf_common+0x96>
 80055a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ac:	1e13      	subs	r3, r2, #0
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	bf18      	it	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	0692      	lsls	r2, r2, #26
 80055b6:	d42b      	bmi.n	8005610 <_printf_common+0xb0>
 80055b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055bc:	4649      	mov	r1, r9
 80055be:	4638      	mov	r0, r7
 80055c0:	47c0      	blx	r8
 80055c2:	3001      	adds	r0, #1
 80055c4:	d01e      	beq.n	8005604 <_printf_common+0xa4>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	68e5      	ldr	r5, [r4, #12]
 80055ca:	6832      	ldr	r2, [r6, #0]
 80055cc:	f003 0306 	and.w	r3, r3, #6
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	bf08      	it	eq
 80055d4:	1aad      	subeq	r5, r5, r2
 80055d6:	68a3      	ldr	r3, [r4, #8]
 80055d8:	6922      	ldr	r2, [r4, #16]
 80055da:	bf0c      	ite	eq
 80055dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e0:	2500      	movne	r5, #0
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bfc4      	itt	gt
 80055e6:	1a9b      	subgt	r3, r3, r2
 80055e8:	18ed      	addgt	r5, r5, r3
 80055ea:	2600      	movs	r6, #0
 80055ec:	341a      	adds	r4, #26
 80055ee:	42b5      	cmp	r5, r6
 80055f0:	d11a      	bne.n	8005628 <_printf_common+0xc8>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e008      	b.n	8005608 <_printf_common+0xa8>
 80055f6:	2301      	movs	r3, #1
 80055f8:	4652      	mov	r2, sl
 80055fa:	4649      	mov	r1, r9
 80055fc:	4638      	mov	r0, r7
 80055fe:	47c0      	blx	r8
 8005600:	3001      	adds	r0, #1
 8005602:	d103      	bne.n	800560c <_printf_common+0xac>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560c:	3501      	adds	r5, #1
 800560e:	e7c6      	b.n	800559e <_printf_common+0x3e>
 8005610:	18e1      	adds	r1, r4, r3
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	2030      	movs	r0, #48	; 0x30
 8005616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800561a:	4422      	add	r2, r4
 800561c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005624:	3302      	adds	r3, #2
 8005626:	e7c7      	b.n	80055b8 <_printf_common+0x58>
 8005628:	2301      	movs	r3, #1
 800562a:	4622      	mov	r2, r4
 800562c:	4649      	mov	r1, r9
 800562e:	4638      	mov	r0, r7
 8005630:	47c0      	blx	r8
 8005632:	3001      	adds	r0, #1
 8005634:	d0e6      	beq.n	8005604 <_printf_common+0xa4>
 8005636:	3601      	adds	r6, #1
 8005638:	e7d9      	b.n	80055ee <_printf_common+0x8e>
	...

0800563c <_printf_i>:
 800563c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	7e0f      	ldrb	r7, [r1, #24]
 8005642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005644:	2f78      	cmp	r7, #120	; 0x78
 8005646:	4691      	mov	r9, r2
 8005648:	4680      	mov	r8, r0
 800564a:	460c      	mov	r4, r1
 800564c:	469a      	mov	sl, r3
 800564e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005652:	d807      	bhi.n	8005664 <_printf_i+0x28>
 8005654:	2f62      	cmp	r7, #98	; 0x62
 8005656:	d80a      	bhi.n	800566e <_printf_i+0x32>
 8005658:	2f00      	cmp	r7, #0
 800565a:	f000 80d8 	beq.w	800580e <_printf_i+0x1d2>
 800565e:	2f58      	cmp	r7, #88	; 0x58
 8005660:	f000 80a3 	beq.w	80057aa <_printf_i+0x16e>
 8005664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800566c:	e03a      	b.n	80056e4 <_printf_i+0xa8>
 800566e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005672:	2b15      	cmp	r3, #21
 8005674:	d8f6      	bhi.n	8005664 <_printf_i+0x28>
 8005676:	a101      	add	r1, pc, #4	; (adr r1, 800567c <_printf_i+0x40>)
 8005678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800567c:	080056d5 	.word	0x080056d5
 8005680:	080056e9 	.word	0x080056e9
 8005684:	08005665 	.word	0x08005665
 8005688:	08005665 	.word	0x08005665
 800568c:	08005665 	.word	0x08005665
 8005690:	08005665 	.word	0x08005665
 8005694:	080056e9 	.word	0x080056e9
 8005698:	08005665 	.word	0x08005665
 800569c:	08005665 	.word	0x08005665
 80056a0:	08005665 	.word	0x08005665
 80056a4:	08005665 	.word	0x08005665
 80056a8:	080057f5 	.word	0x080057f5
 80056ac:	08005719 	.word	0x08005719
 80056b0:	080057d7 	.word	0x080057d7
 80056b4:	08005665 	.word	0x08005665
 80056b8:	08005665 	.word	0x08005665
 80056bc:	08005817 	.word	0x08005817
 80056c0:	08005665 	.word	0x08005665
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005665 	.word	0x08005665
 80056cc:	08005665 	.word	0x08005665
 80056d0:	080057df 	.word	0x080057df
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	602a      	str	r2, [r5, #0]
 80056dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0a3      	b.n	8005830 <_printf_i+0x1f4>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	6829      	ldr	r1, [r5, #0]
 80056ec:	0606      	lsls	r6, r0, #24
 80056ee:	f101 0304 	add.w	r3, r1, #4
 80056f2:	d50a      	bpl.n	800570a <_printf_i+0xce>
 80056f4:	680e      	ldr	r6, [r1, #0]
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	da03      	bge.n	8005704 <_printf_i+0xc8>
 80056fc:	232d      	movs	r3, #45	; 0x2d
 80056fe:	4276      	negs	r6, r6
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	485e      	ldr	r0, [pc, #376]	; (8005880 <_printf_i+0x244>)
 8005706:	230a      	movs	r3, #10
 8005708:	e019      	b.n	800573e <_printf_i+0x102>
 800570a:	680e      	ldr	r6, [r1, #0]
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005712:	bf18      	it	ne
 8005714:	b236      	sxthne	r6, r6
 8005716:	e7ef      	b.n	80056f8 <_printf_i+0xbc>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	1d19      	adds	r1, r3, #4
 800571e:	6029      	str	r1, [r5, #0]
 8005720:	0601      	lsls	r1, r0, #24
 8005722:	d501      	bpl.n	8005728 <_printf_i+0xec>
 8005724:	681e      	ldr	r6, [r3, #0]
 8005726:	e002      	b.n	800572e <_printf_i+0xf2>
 8005728:	0646      	lsls	r6, r0, #25
 800572a:	d5fb      	bpl.n	8005724 <_printf_i+0xe8>
 800572c:	881e      	ldrh	r6, [r3, #0]
 800572e:	4854      	ldr	r0, [pc, #336]	; (8005880 <_printf_i+0x244>)
 8005730:	2f6f      	cmp	r7, #111	; 0x6f
 8005732:	bf0c      	ite	eq
 8005734:	2308      	moveq	r3, #8
 8005736:	230a      	movne	r3, #10
 8005738:	2100      	movs	r1, #0
 800573a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800573e:	6865      	ldr	r5, [r4, #4]
 8005740:	60a5      	str	r5, [r4, #8]
 8005742:	2d00      	cmp	r5, #0
 8005744:	bfa2      	ittt	ge
 8005746:	6821      	ldrge	r1, [r4, #0]
 8005748:	f021 0104 	bicge.w	r1, r1, #4
 800574c:	6021      	strge	r1, [r4, #0]
 800574e:	b90e      	cbnz	r6, 8005754 <_printf_i+0x118>
 8005750:	2d00      	cmp	r5, #0
 8005752:	d04d      	beq.n	80057f0 <_printf_i+0x1b4>
 8005754:	4615      	mov	r5, r2
 8005756:	fbb6 f1f3 	udiv	r1, r6, r3
 800575a:	fb03 6711 	mls	r7, r3, r1, r6
 800575e:	5dc7      	ldrb	r7, [r0, r7]
 8005760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005764:	4637      	mov	r7, r6
 8005766:	42bb      	cmp	r3, r7
 8005768:	460e      	mov	r6, r1
 800576a:	d9f4      	bls.n	8005756 <_printf_i+0x11a>
 800576c:	2b08      	cmp	r3, #8
 800576e:	d10b      	bne.n	8005788 <_printf_i+0x14c>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	07de      	lsls	r6, r3, #31
 8005774:	d508      	bpl.n	8005788 <_printf_i+0x14c>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6861      	ldr	r1, [r4, #4]
 800577a:	4299      	cmp	r1, r3
 800577c:	bfde      	ittt	le
 800577e:	2330      	movle	r3, #48	; 0x30
 8005780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005784:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005788:	1b52      	subs	r2, r2, r5
 800578a:	6122      	str	r2, [r4, #16]
 800578c:	f8cd a000 	str.w	sl, [sp]
 8005790:	464b      	mov	r3, r9
 8005792:	aa03      	add	r2, sp, #12
 8005794:	4621      	mov	r1, r4
 8005796:	4640      	mov	r0, r8
 8005798:	f7ff fee2 	bl	8005560 <_printf_common>
 800579c:	3001      	adds	r0, #1
 800579e:	d14c      	bne.n	800583a <_printf_i+0x1fe>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	b004      	add	sp, #16
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	4835      	ldr	r0, [pc, #212]	; (8005880 <_printf_i+0x244>)
 80057ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b8:	6029      	str	r1, [r5, #0]
 80057ba:	061d      	lsls	r5, r3, #24
 80057bc:	d514      	bpl.n	80057e8 <_printf_i+0x1ac>
 80057be:	07df      	lsls	r7, r3, #31
 80057c0:	bf44      	itt	mi
 80057c2:	f043 0320 	orrmi.w	r3, r3, #32
 80057c6:	6023      	strmi	r3, [r4, #0]
 80057c8:	b91e      	cbnz	r6, 80057d2 <_printf_i+0x196>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	f023 0320 	bic.w	r3, r3, #32
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	2310      	movs	r3, #16
 80057d4:	e7b0      	b.n	8005738 <_printf_i+0xfc>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f043 0320 	orr.w	r3, r3, #32
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	2378      	movs	r3, #120	; 0x78
 80057e0:	4828      	ldr	r0, [pc, #160]	; (8005884 <_printf_i+0x248>)
 80057e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057e6:	e7e3      	b.n	80057b0 <_printf_i+0x174>
 80057e8:	0659      	lsls	r1, r3, #25
 80057ea:	bf48      	it	mi
 80057ec:	b2b6      	uxthmi	r6, r6
 80057ee:	e7e6      	b.n	80057be <_printf_i+0x182>
 80057f0:	4615      	mov	r5, r2
 80057f2:	e7bb      	b.n	800576c <_printf_i+0x130>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	6826      	ldr	r6, [r4, #0]
 80057f8:	6961      	ldr	r1, [r4, #20]
 80057fa:	1d18      	adds	r0, r3, #4
 80057fc:	6028      	str	r0, [r5, #0]
 80057fe:	0635      	lsls	r5, r6, #24
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	d501      	bpl.n	8005808 <_printf_i+0x1cc>
 8005804:	6019      	str	r1, [r3, #0]
 8005806:	e002      	b.n	800580e <_printf_i+0x1d2>
 8005808:	0670      	lsls	r0, r6, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0x1c8>
 800580c:	8019      	strh	r1, [r3, #0]
 800580e:	2300      	movs	r3, #0
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	4615      	mov	r5, r2
 8005814:	e7ba      	b.n	800578c <_printf_i+0x150>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	602a      	str	r2, [r5, #0]
 800581c:	681d      	ldr	r5, [r3, #0]
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	2100      	movs	r1, #0
 8005822:	4628      	mov	r0, r5
 8005824:	f7fa fce4 	bl	80001f0 <memchr>
 8005828:	b108      	cbz	r0, 800582e <_printf_i+0x1f2>
 800582a:	1b40      	subs	r0, r0, r5
 800582c:	6060      	str	r0, [r4, #4]
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	6123      	str	r3, [r4, #16]
 8005832:	2300      	movs	r3, #0
 8005834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005838:	e7a8      	b.n	800578c <_printf_i+0x150>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	462a      	mov	r2, r5
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d0ab      	beq.n	80057a0 <_printf_i+0x164>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	079b      	lsls	r3, r3, #30
 800584c:	d413      	bmi.n	8005876 <_printf_i+0x23a>
 800584e:	68e0      	ldr	r0, [r4, #12]
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	4298      	cmp	r0, r3
 8005854:	bfb8      	it	lt
 8005856:	4618      	movlt	r0, r3
 8005858:	e7a4      	b.n	80057a4 <_printf_i+0x168>
 800585a:	2301      	movs	r3, #1
 800585c:	4632      	mov	r2, r6
 800585e:	4649      	mov	r1, r9
 8005860:	4640      	mov	r0, r8
 8005862:	47d0      	blx	sl
 8005864:	3001      	adds	r0, #1
 8005866:	d09b      	beq.n	80057a0 <_printf_i+0x164>
 8005868:	3501      	adds	r5, #1
 800586a:	68e3      	ldr	r3, [r4, #12]
 800586c:	9903      	ldr	r1, [sp, #12]
 800586e:	1a5b      	subs	r3, r3, r1
 8005870:	42ab      	cmp	r3, r5
 8005872:	dcf2      	bgt.n	800585a <_printf_i+0x21e>
 8005874:	e7eb      	b.n	800584e <_printf_i+0x212>
 8005876:	2500      	movs	r5, #0
 8005878:	f104 0619 	add.w	r6, r4, #25
 800587c:	e7f5      	b.n	800586a <_printf_i+0x22e>
 800587e:	bf00      	nop
 8005880:	08005b19 	.word	0x08005b19
 8005884:	08005b2a 	.word	0x08005b2a

08005888 <_sbrk_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d06      	ldr	r5, [pc, #24]	; (80058a4 <_sbrk_r+0x1c>)
 800588c:	2300      	movs	r3, #0
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	f7fb faa0 	bl	8000dd8 <_sbrk>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_sbrk_r+0x1a>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_sbrk_r+0x1a>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	200001bc 	.word	0x200001bc

080058a8 <__sread>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	460c      	mov	r4, r1
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	f000 f8a0 	bl	80059f4 <_read_r>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	bfab      	itete	ge
 80058b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058ba:	89a3      	ldrhlt	r3, [r4, #12]
 80058bc:	181b      	addge	r3, r3, r0
 80058be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058c2:	bfac      	ite	ge
 80058c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058c6:	81a3      	strhlt	r3, [r4, #12]
 80058c8:	bd10      	pop	{r4, pc}

080058ca <__swrite>:
 80058ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	461f      	mov	r7, r3
 80058d0:	898b      	ldrh	r3, [r1, #12]
 80058d2:	05db      	lsls	r3, r3, #23
 80058d4:	4605      	mov	r5, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	4616      	mov	r6, r2
 80058da:	d505      	bpl.n	80058e8 <__swrite+0x1e>
 80058dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e0:	2302      	movs	r3, #2
 80058e2:	2200      	movs	r2, #0
 80058e4:	f000 f868 	bl	80059b8 <_lseek_r>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	4632      	mov	r2, r6
 80058f6:	463b      	mov	r3, r7
 80058f8:	4628      	mov	r0, r5
 80058fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058fe:	f000 b817 	b.w	8005930 <_write_r>

08005902 <__sseek>:
 8005902:	b510      	push	{r4, lr}
 8005904:	460c      	mov	r4, r1
 8005906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590a:	f000 f855 	bl	80059b8 <_lseek_r>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	bf15      	itete	ne
 8005914:	6560      	strne	r0, [r4, #84]	; 0x54
 8005916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800591a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800591e:	81a3      	strheq	r3, [r4, #12]
 8005920:	bf18      	it	ne
 8005922:	81a3      	strhne	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__sclose>:
 8005926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592a:	f000 b813 	b.w	8005954 <_close_r>
	...

08005930 <_write_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d07      	ldr	r5, [pc, #28]	; (8005950 <_write_r+0x20>)
 8005934:	4604      	mov	r4, r0
 8005936:	4608      	mov	r0, r1
 8005938:	4611      	mov	r1, r2
 800593a:	2200      	movs	r2, #0
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f7fb f9f9 	bl	8000d36 <_write>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_write_r+0x1e>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_write_r+0x1e>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	200001bc 	.word	0x200001bc

08005954 <_close_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d06      	ldr	r5, [pc, #24]	; (8005970 <_close_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f7fb fa05 	bl	8000d6e <_close>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_close_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_close_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	200001bc 	.word	0x200001bc

08005974 <_fstat_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <_fstat_r+0x20>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f7fb fa00 	bl	8000d86 <_fstat>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d102      	bne.n	8005990 <_fstat_r+0x1c>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	b103      	cbz	r3, 8005990 <_fstat_r+0x1c>
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop
 8005994:	200001bc 	.word	0x200001bc

08005998 <_isatty_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_isatty_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb f9ff 	bl	8000da6 <_isatty>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_isatty_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_isatty_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	200001bc 	.word	0x200001bc

080059b8 <_lseek_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_lseek_r+0x20>)
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fb f9f8 	bl	8000dbc <_lseek>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_lseek_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_lseek_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200001bc 	.word	0x200001bc

080059dc <__malloc_lock>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__malloc_lock+0x8>)
 80059de:	f7ff bb1d 	b.w	800501c <__retarget_lock_acquire_recursive>
 80059e2:	bf00      	nop
 80059e4:	200001b0 	.word	0x200001b0

080059e8 <__malloc_unlock>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__malloc_unlock+0x8>)
 80059ea:	f7ff bb18 	b.w	800501e <__retarget_lock_release_recursive>
 80059ee:	bf00      	nop
 80059f0:	200001b0 	.word	0x200001b0

080059f4 <_read_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d07      	ldr	r5, [pc, #28]	; (8005a14 <_read_r+0x20>)
 80059f8:	4604      	mov	r4, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	602a      	str	r2, [r5, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7fb f97a 	bl	8000cfc <_read>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_read_r+0x1e>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_read_r+0x1e>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	200001bc 	.word	0x200001bc

08005a18 <_init>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr

08005a24 <_fini>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr
